# coding: utf-8

"""
    Bandwidth Dashboard REST API Documentation

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def accounts_account_id_available_npa_nxx_get(self, account_id, **kwargs):
        """
        
        Retrieves a list of available Npa-Nxx telephone numbers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_available_npa_nxx_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param int area_code: The allowed number ranges are [2-9] for the first digit and [0-9] for both the second and third digits.
        :param str state: Returns only the NPA NXX information within the specified state
        :param int quantity: Filters out any Npa-Nxx grouped phone numbers whose quantity falls short of the given quantity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_available_npa_nxx_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_available_npa_nxx_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_available_npa_nxx_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieves a list of available Npa-Nxx telephone numbers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_available_npa_nxx_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param int area_code: The allowed number ranges are [2-9] for the first digit and [0-9] for both the second and third digits.
        :param str state: Returns only the NPA NXX information within the specified state
        :param int quantity: Filters out any Npa-Nxx grouped phone numbers whose quantity falls short of the given quantity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'area_code', 'state', 'quantity']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_available_npa_nxx_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_available_npa_nxx_get`")

        resource_path = '/accounts/{accountId}/availableNpaNxx'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'area_code' in params:
            query_params['areaCode'] = params['area_code']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'quantity' in params:
            query_params['quantity'] = params['quantity']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_available_numbers_get(self, account_id, **kwargs):
        """
        
        Retrieves the phone numbers according to the input parameters

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_available_numbers_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param int quantity: The desired quantity of requested numbers. Values range from 1-5000.
        :param bool enable_tn_detail: If set to true, a list of details associated with the telephone number (rate center, abbreviation, city, state, and LATA) will be displayed along with the TN.
        :param bool lca: Values are true or false.
        :param bool ends_in: Intended to use with <i>localVanity</i> only. If set to true, the search will look for only numbers which end in specified <i>localVanity</i>, otherwise <i>localVanity</i> sequence can be met anywhere in last 7 number digits. The default is false.
        :param int area_code: The 3-digit area code associated with the TN. Allowed number ranges are [2-9] for the first digit and [0-9] for both the second and third digits.
        :param int npa_nxx: The 6 prefix associated with the TN.<br> Allowed number ranges for NPA are [2-9] for the first digit and [0-9] for both the second and third digits.<br> Allowed number ranges for NXX are [2-9] for the first digit and [0-9] for both the second and third digits.<br> 
        :param int npa_nxxx: The 7-digit prefix associated with the TN.<br> Allowed number ranges for NPA are [2-9] for the first digit and [0-9] for both the second and third digits.<br> Allowed number ranges for NXXX are [2-9] for the first digit and [0-9] the rest of the (X) digits.<br> 
        :param int lata: A maximum five digit (XXXXX) numeric format
        :param str rate_center: The abbreviation for the rateCenter
        :param str city: The name of the city.
        :param str state: The two-letter abbreviation of the state the RateCenter is in
        :param str toll_free_vanity: The Toll Free requested vanity number. Valid range is 7+ digits alphanumeric.
        :param str toll_free_wild_card_pattern: The Toll Free requested wild card pattern. valid range is 3 digits.
        :param str local_vanity: Requested vanity number. Valid range is from 4 to 7 alphanumeric characters.
        :param int zip: A five-digit (XXXXX) or nine-digit (XXXXX-XXXX) format value.
        :param str order_by: The field by which the results should be sorted
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_available_numbers_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_available_numbers_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_available_numbers_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieves the phone numbers according to the input parameters

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_available_numbers_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param int quantity: The desired quantity of requested numbers. Values range from 1-5000.
        :param bool enable_tn_detail: If set to true, a list of details associated with the telephone number (rate center, abbreviation, city, state, and LATA) will be displayed along with the TN.
        :param bool lca: Values are true or false.
        :param bool ends_in: Intended to use with <i>localVanity</i> only. If set to true, the search will look for only numbers which end in specified <i>localVanity</i>, otherwise <i>localVanity</i> sequence can be met anywhere in last 7 number digits. The default is false.
        :param int area_code: The 3-digit area code associated with the TN. Allowed number ranges are [2-9] for the first digit and [0-9] for both the second and third digits.
        :param int npa_nxx: The 6 prefix associated with the TN.<br> Allowed number ranges for NPA are [2-9] for the first digit and [0-9] for both the second and third digits.<br> Allowed number ranges for NXX are [2-9] for the first digit and [0-9] for both the second and third digits.<br> 
        :param int npa_nxxx: The 7-digit prefix associated with the TN.<br> Allowed number ranges for NPA are [2-9] for the first digit and [0-9] for both the second and third digits.<br> Allowed number ranges for NXXX are [2-9] for the first digit and [0-9] the rest of the (X) digits.<br> 
        :param int lata: A maximum five digit (XXXXX) numeric format
        :param str rate_center: The abbreviation for the rateCenter
        :param str city: The name of the city.
        :param str state: The two-letter abbreviation of the state the RateCenter is in
        :param str toll_free_vanity: The Toll Free requested vanity number. Valid range is 7+ digits alphanumeric.
        :param str toll_free_wild_card_pattern: The Toll Free requested wild card pattern. valid range is 3 digits.
        :param str local_vanity: Requested vanity number. Valid range is from 4 to 7 alphanumeric characters.
        :param int zip: A five-digit (XXXXX) or nine-digit (XXXXX-XXXX) format value.
        :param str order_by: The field by which the results should be sorted
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'quantity', 'enable_tn_detail', 'lca', 'ends_in', 'area_code', 'npa_nxx', 'npa_nxxx', 'lata', 'rate_center', 'city', 'state', 'toll_free_vanity', 'toll_free_wild_card_pattern', 'local_vanity', 'zip', 'order_by']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_available_numbers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_available_numbers_get`")

        resource_path = '/accounts/{accountId}/availableNumbers'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'quantity' in params:
            query_params['quantity'] = params['quantity']
        if 'enable_tn_detail' in params:
            query_params['enableTNDetail'] = params['enable_tn_detail']
        if 'lca' in params:
            query_params['LCA'] = params['lca']
        if 'ends_in' in params:
            query_params['endsIn'] = params['ends_in']
        if 'area_code' in params:
            query_params['areaCode'] = params['area_code']
        if 'npa_nxx' in params:
            query_params['npaNxx'] = params['npa_nxx']
        if 'npa_nxxx' in params:
            query_params['npaNxxx'] = params['npa_nxxx']
        if 'lata' in params:
            query_params['lata'] = params['lata']
        if 'rate_center' in params:
            query_params['rateCenter'] = params['rate_center']
        if 'city' in params:
            query_params['city'] = params['city']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'toll_free_vanity' in params:
            query_params['tollFreeVanity'] = params['toll_free_vanity']
        if 'toll_free_wild_card_pattern' in params:
            query_params['tollFreeWildCardPattern'] = params['toll_free_wild_card_pattern']
        if 'local_vanity' in params:
            query_params['localVanity'] = params['local_vanity']
        if 'zip' in params:
            query_params['zip'] = params['zip']
        if 'order_by' in params:
            query_params['orderBy'] = params['order_by']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_bdrs_bdrid_file_get(self, account_id, bdrid, **kwargs):
        """
        
        A GET on the /file resource subtending a BDR ID will cause the download of the file.  Executing this resource path within a browser will cause the download of the file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_bdrs_bdrid_file_get(account_id, bdrid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str bdrid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_bdrs_bdrid_file_get_with_http_info(account_id, bdrid, **kwargs)
        else:
            (data) = self.accounts_account_id_bdrs_bdrid_file_get_with_http_info(account_id, bdrid, **kwargs)
            return data

    def accounts_account_id_bdrs_bdrid_file_get_with_http_info(self, account_id, bdrid, **kwargs):
        """
        
        A GET on the /file resource subtending a BDR ID will cause the download of the file.  Executing this resource path within a browser will cause the download of the file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_bdrs_bdrid_file_get_with_http_info(account_id, bdrid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str bdrid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'bdrid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_bdrs_bdrid_file_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_bdrs_bdrid_file_get`")
        # verify the required parameter 'bdrid' is set
        if ('bdrid' not in params) or (params['bdrid'] is None):
            raise ValueError("Missing the required parameter `bdrid` when calling `accounts_account_id_bdrs_bdrid_file_get`")

        resource_path = '/accounts/{accountId}/bdrs/{bdrid}/file'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'bdrid' in params:
            path_params['bdrid'] = params['bdrid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_bdrs_bdrid_get(self, account_id, bdrid, **kwargs):
        """
        
        A GET on the BDR ID will return a \"still processing\" indication if the file creation has not completed, or will redirect to the file to be downloaded.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_bdrs_bdrid_get(account_id, bdrid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str bdrid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_bdrs_bdrid_get_with_http_info(account_id, bdrid, **kwargs)
        else:
            (data) = self.accounts_account_id_bdrs_bdrid_get_with_http_info(account_id, bdrid, **kwargs)
            return data

    def accounts_account_id_bdrs_bdrid_get_with_http_info(self, account_id, bdrid, **kwargs):
        """
        
        A GET on the BDR ID will return a \"still processing\" indication if the file creation has not completed, or will redirect to the file to be downloaded.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_bdrs_bdrid_get_with_http_info(account_id, bdrid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str bdrid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'bdrid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_bdrs_bdrid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_bdrs_bdrid_get`")
        # verify the required parameter 'bdrid' is set
        if ('bdrid' not in params) or (params['bdrid'] is None):
            raise ValueError("Missing the required parameter `bdrid` when calling `accounts_account_id_bdrs_bdrid_get`")

        resource_path = '/accounts/{accountId}/bdrs/{bdrid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'bdrid' in params:
            path_params['bdrid'] = params['bdrid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_bdrs_post(self, account_id, **kwargs):
        """
        
        Request a collection of BDRs be aggregated and ZIPped ready for distribution.  The payload for the POST declares the date range for the request.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_bdrs_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_bdrs_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_bdrs_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_bdrs_post_with_http_info(self, account_id, **kwargs):
        """
        
        Request a collection of BDRs be aggregated and ZIPped ready for distribution.  The payload for the POST declares the date range for the request.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_bdrs_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_bdrs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_bdrs_post`")

        resource_path = '/accounts/{accountId}/bdrs'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_billingreports_post(self, account_id, **kwargs):
        """
        
        The payload for the POST declares the date range and type for the desired reports. The valid Types are... <ul> <li>BDR - Billing Detail Records - per call information</li> <li>MDR - Message Detail Records - per messagin information</li> <li>INVOICE - A copy of the invoice file or files for the specified date range</li> <li>STATEMENT&#95;BDR - BDR records that are aligned with the invoice</li> <li>DID&#95;SNAPSHOT - a list of telephone numbers aligned as closely as we can with the billing window</li> </ul>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_billingreports_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_billingreports_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_billingreports_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_billingreports_post_with_http_info(self, account_id, **kwargs):
        """
        
        The payload for the POST declares the date range and type for the desired reports. The valid Types are... <ul> <li>BDR - Billing Detail Records - per call information</li> <li>MDR - Message Detail Records - per messagin information</li> <li>INVOICE - A copy of the invoice file or files for the specified date range</li> <li>STATEMENT&#95;BDR - BDR records that are aligned with the invoice</li> <li>DID&#95;SNAPSHOT - a list of telephone numbers aligned as closely as we can with the billing window</li> </ul>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_billingreports_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_billingreports_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_billingreports_post`")

        resource_path = '/accounts/{accountId}/billingreports'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_billingreports_reportid_file_get(self, account_id, reportid, **kwargs):
        """
        
        A GET on the /file resource subtending a report ID will cause the download of the file.  Executing this resource path within a browser will cause the download of the file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_billingreports_reportid_file_get(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_billingreports_reportid_file_get_with_http_info(account_id, reportid, **kwargs)
        else:
            (data) = self.accounts_account_id_billingreports_reportid_file_get_with_http_info(account_id, reportid, **kwargs)
            return data

    def accounts_account_id_billingreports_reportid_file_get_with_http_info(self, account_id, reportid, **kwargs):
        """
        
        A GET on the /file resource subtending a report ID will cause the download of the file.  Executing this resource path within a browser will cause the download of the file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_billingreports_reportid_file_get_with_http_info(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reportid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_billingreports_reportid_file_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_billingreports_reportid_file_get`")
        # verify the required parameter 'reportid' is set
        if ('reportid' not in params) or (params['reportid'] is None):
            raise ValueError("Missing the required parameter `reportid` when calling `accounts_account_id_billingreports_reportid_file_get`")

        resource_path = '/accounts/{accountId}/billingreports/{reportid}/file'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reportid' in params:
            path_params['reportid'] = params['reportid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_billingreports_reportid_get(self, account_id, reportid, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_billingreports_reportid_get(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_billingreports_reportid_get_with_http_info(account_id, reportid, **kwargs)
        else:
            (data) = self.accounts_account_id_billingreports_reportid_get_with_http_info(account_id, reportid, **kwargs)
            return data

    def accounts_account_id_billingreports_reportid_get_with_http_info(self, account_id, reportid, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_billingreports_reportid_get_with_http_info(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reportid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_billingreports_reportid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_billingreports_reportid_get`")
        # verify the required parameter 'reportid' is set
        if ('reportid' not in params) or (params['reportid'] is None):
            raise ValueError("Missing the required parameter `reportid` when calling `accounts_account_id_billingreports_reportid_get`")

        resource_path = '/accounts/{accountId}/billingreports/{reportid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reportid' in params:
            path_params['reportid'] = params['reportid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_discnumbers_get(self, account_id, page, size, **kwargs):
        """
        
        Retrieves a list of disconnected numbers associated with the account. There are optional search parameters to limit the discNumbers payload

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_discnumbers_get(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: The first disconnected number on the desired page.   \"1\" is used as a convention for the first disconnected number in the collection (required)
        :param int size: The number of records that should be returned by the query (required)
        :param date startdate: The starting date of a search. startdate and enddate <strong>must</strong> be used as a pair.
        :param date enddate: The ending date of a search. startdate and enddate <strong>must</strong> be used as a pair.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_discnumbers_get_with_http_info(account_id, page, size, **kwargs)
        else:
            (data) = self.accounts_account_id_discnumbers_get_with_http_info(account_id, page, size, **kwargs)
            return data

    def accounts_account_id_discnumbers_get_with_http_info(self, account_id, page, size, **kwargs):
        """
        
        Retrieves a list of disconnected numbers associated with the account. There are optional search parameters to limit the discNumbers payload

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_discnumbers_get_with_http_info(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: The first disconnected number on the desired page.   \"1\" is used as a convention for the first disconnected number in the collection (required)
        :param int size: The number of records that should be returned by the query (required)
        :param date startdate: The starting date of a search. startdate and enddate <strong>must</strong> be used as a pair.
        :param date enddate: The ending date of a search. startdate and enddate <strong>must</strong> be used as a pair.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page', 'size', 'startdate', 'enddate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_discnumbers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_discnumbers_get`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `accounts_account_id_discnumbers_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `accounts_account_id_discnumbers_get`")

        resource_path = '/accounts/{accountId}/discnumbers'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_discnumbers_totals_get(self, account_id, **kwargs):
        """
        
        Retrieves a total number of disconnects.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_discnumbers_totals_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param date startdate: The starting date of a search. startdate and enddate <strong>must</strong> be used as a pair.
        :param date enddate: The end date of a search. startdate and enddate <strong>must</strong> be used as a pair.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_discnumbers_totals_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_discnumbers_totals_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_discnumbers_totals_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieves a total number of disconnects.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_discnumbers_totals_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param date startdate: The starting date of a search. startdate and enddate <strong>must</strong> be used as a pair.
        :param date enddate: The end date of a search. startdate and enddate <strong>must</strong> be used as a pair.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'startdate', 'enddate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_discnumbers_totals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_discnumbers_totals_get`")

        resource_path = '/accounts/{accountId}/discnumbers/totals'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_disconnects_disconnectid_get(self, account_id, disconnectid, **kwargs):
        """
        
        Retrieves the information associated with the disconnect order specified.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_disconnectid_get(account_id, disconnectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str disconnectid:  (required)
        :param str tndetail: If set to true, displays the disconnect order's telephone order information in greater detail
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_disconnects_disconnectid_get_with_http_info(account_id, disconnectid, **kwargs)
        else:
            (data) = self.accounts_account_id_disconnects_disconnectid_get_with_http_info(account_id, disconnectid, **kwargs)
            return data

    def accounts_account_id_disconnects_disconnectid_get_with_http_info(self, account_id, disconnectid, **kwargs):
        """
        
        Retrieves the information associated with the disconnect order specified.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_disconnectid_get_with_http_info(account_id, disconnectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str disconnectid:  (required)
        :param str tndetail: If set to true, displays the disconnect order's telephone order information in greater detail
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'disconnectid', 'tndetail']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_disconnects_disconnectid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_disconnects_disconnectid_get`")
        # verify the required parameter 'disconnectid' is set
        if ('disconnectid' not in params) or (params['disconnectid'] is None):
            raise ValueError("Missing the required parameter `disconnectid` when calling `accounts_account_id_disconnects_disconnectid_get`")

        resource_path = '/accounts/{accountId}/disconnects/{disconnectid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'disconnectid' in params:
            path_params['disconnectid'] = params['disconnectid']

        query_params = {}
        if 'tndetail' in params:
            query_params['tndetail'] = params['tndetail']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_disconnects_disconnectid_notes_get(self, account_id, disconnectid, **kwargs):
        """
        
        Retrieve the set of notes associated with an order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_disconnectid_notes_get(account_id, disconnectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str disconnectid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_disconnects_disconnectid_notes_get_with_http_info(account_id, disconnectid, **kwargs)
        else:
            (data) = self.accounts_account_id_disconnects_disconnectid_notes_get_with_http_info(account_id, disconnectid, **kwargs)
            return data

    def accounts_account_id_disconnects_disconnectid_notes_get_with_http_info(self, account_id, disconnectid, **kwargs):
        """
        
        Retrieve the set of notes associated with an order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_disconnectid_notes_get_with_http_info(account_id, disconnectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str disconnectid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'disconnectid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_disconnects_disconnectid_notes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_disconnects_disconnectid_notes_get`")
        # verify the required parameter 'disconnectid' is set
        if ('disconnectid' not in params) or (params['disconnectid'] is None):
            raise ValueError("Missing the required parameter `disconnectid` when calling `accounts_account_id_disconnects_disconnectid_notes_get`")

        resource_path = '/accounts/{accountId}/disconnects/{disconnectid}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'disconnectid' in params:
            path_params['disconnectid'] = params['disconnectid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_disconnects_disconnectid_notes_post(self, account_id, disconnectid, **kwargs):
        """
        
        Updates the Notes resource by adding a note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_disconnectid_notes_post(account_id, disconnectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str disconnectid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_disconnects_disconnectid_notes_post_with_http_info(account_id, disconnectid, **kwargs)
        else:
            (data) = self.accounts_account_id_disconnects_disconnectid_notes_post_with_http_info(account_id, disconnectid, **kwargs)
            return data

    def accounts_account_id_disconnects_disconnectid_notes_post_with_http_info(self, account_id, disconnectid, **kwargs):
        """
        
        Updates the Notes resource by adding a note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_disconnectid_notes_post_with_http_info(account_id, disconnectid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str disconnectid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'disconnectid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_disconnects_disconnectid_notes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_disconnects_disconnectid_notes_post`")
        # verify the required parameter 'disconnectid' is set
        if ('disconnectid' not in params) or (params['disconnectid'] is None):
            raise ValueError("Missing the required parameter `disconnectid` when calling `accounts_account_id_disconnects_disconnectid_notes_post`")

        resource_path = '/accounts/{accountId}/disconnects/{disconnectid}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'disconnectid' in params:
            path_params['disconnectid'] = params['disconnectid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_disconnects_get(self, account_id, page, size, **kwargs):
        """
        
        retrieve a list of disconnect orders that is associated with an account

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_get(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: The disconnect order-id of the first record on the page.   \"1\" is used as a convention for the first disconnect order in the collection (required)
        :param int size: The number of records that should be returned by the query (required)
        :param str userid: The user ID associated with disconnected phone numbers
        :param str status: The status of the order
        :param date startdate: Retrieves all phone numbers disconnected after this date. The start date also requires the end date to be specified.
        :param date enddate: Retrieves all phone numbers disconnected before this date. The end date also requires the start date to be specified.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_disconnects_get_with_http_info(account_id, page, size, **kwargs)
        else:
            (data) = self.accounts_account_id_disconnects_get_with_http_info(account_id, page, size, **kwargs)
            return data

    def accounts_account_id_disconnects_get_with_http_info(self, account_id, page, size, **kwargs):
        """
        
        retrieve a list of disconnect orders that is associated with an account

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_get_with_http_info(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: The disconnect order-id of the first record on the page.   \"1\" is used as a convention for the first disconnect order in the collection (required)
        :param int size: The number of records that should be returned by the query (required)
        :param str userid: The user ID associated with disconnected phone numbers
        :param str status: The status of the order
        :param date startdate: Retrieves all phone numbers disconnected after this date. The start date also requires the end date to be specified.
        :param date enddate: Retrieves all phone numbers disconnected before this date. The end date also requires the start date to be specified.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page', 'size', 'userid', 'status', 'startdate', 'enddate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_disconnects_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_disconnects_get`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `accounts_account_id_disconnects_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `accounts_account_id_disconnects_get`")

        resource_path = '/accounts/{accountId}/disconnects'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'userid' in params:
            query_params['userid'] = params['userid']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_disconnects_post(self, account_id, **kwargs):
        """
        
        Create a Disconnect order, and disconnect the numbers listed in the disconnect order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_disconnects_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_disconnects_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_disconnects_post_with_http_info(self, account_id, **kwargs):
        """
        
        Create a Disconnect order, and disconnect the numbers listed in the disconnect order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_disconnects_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_disconnects_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_disconnects_post`")

        resource_path = '/accounts/{accountId}/disconnects'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_dldas_get(self, account_id, **kwargs):
        """
        
        Retrieve a list of the DLDA orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str last_modified_after: Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd
        :param str modified_date_from: For Date-based searches, the starting date of a date range that will be used to find DLDA Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str modified_date_to: For Date-based searches, the ending date of a date range that will be used to find DLDA Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_dldas_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_dldas_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_dldas_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieve a list of the DLDA orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str last_modified_after: Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd
        :param str modified_date_from: For Date-based searches, the starting date of a date range that will be used to find DLDA Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str modified_date_to: For Date-based searches, the ending date of a date range that will be used to find DLDA Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'tn', 'last_modified_after', 'modified_date_from', 'modified_date_to']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_dldas_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_dldas_get`")

        resource_path = '/accounts/{accountId}/dldas'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'tn' in params:
            query_params['tn'] = params['tn']
        if 'last_modified_after' in params:
            query_params['lastModifiedAfter'] = params['last_modified_after']
        if 'modified_date_from' in params:
            query_params['modifiedDateFrom'] = params['modified_date_from']
        if 'modified_date_to' in params:
            query_params['modifiedDateTo'] = params['modified_date_to']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_dldas_orderid_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve information about a DLDA Order with specified ID. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_orderid_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_dldas_orderid_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_dldas_orderid_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_dldas_orderid_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve information about a DLDA Order with specified ID. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_orderid_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_dldas_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_dldas_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_dldas_orderid_get`")

        resource_path = '/accounts/{accountId}/dldas/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_dldas_orderid_history_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the history information associated with a named DLDA order.  This indicates the various states that the order has passed through, as well as the current state of the order as the last entry. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_orderid_history_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_dldas_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_dldas_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_dldas_orderid_history_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the history information associated with a named DLDA order.  This indicates the various states that the order has passed through, as well as the current state of the order as the last entry. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_orderid_history_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_dldas_orderid_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_dldas_orderid_history_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_dldas_orderid_history_get`")

        resource_path = '/accounts/{accountId}/dldas/{orderid}/history'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_dldas_orderid_put(self, account_id, orderid, **kwargs):
        """
        
        Update DLDA order to associate the street address with the telephone number. The key data elements in the submission are -      <table style=\"text-align: left; width: 80%;\"      border=\"1\" cellpadding=\"2\" cellspacing=\"2\">       <tbody>         <tr>           <td>TelephoneNumbers</td>           <td>A list of telephone numbers you need to bind information from payload.</td>         </tr>         <tr>           <td>AccountType</td>           <td>Can be RESIDENTIAL or BUSINESS.  The element is required.</td>         </tr>         <tr>           <td>ListingType</td>           <td>Can be LISTED, NON_LISTED or NON_PUBLISHED. The element is required</td>         </tr>         <tr>           <td>ListingName</td>           <td>Inner fields: FirstName, FirstName2, LastName, Designation, TitleOfLineage, TitleOfAddress, TitleOfAddress2, TitleOfLineageName2, TitleOfAddressName2, TitleOfAddress2Name2, PlaceListingAs.</td>         </tr>         <tr>           <td>ListAddress</td>           <td>Can be true or false. The element is required.</td>         </tr>         <tr>           <td>Address</td>           <td>This field is required. Inner fields: HousePrefix, HouseNumber, HouseSuffix, PreDirectional, StreetName, StreetSuffix, PostDirectional, AddressLine2, City, StateCode, Zip, PlusFour, AddressType</td>         </tr>       </tbody>     </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_orderid_put(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_dldas_orderid_put_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_dldas_orderid_put_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_dldas_orderid_put_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Update DLDA order to associate the street address with the telephone number. The key data elements in the submission are -      <table style=\"text-align: left; width: 80%;\"      border=\"1\" cellpadding=\"2\" cellspacing=\"2\">       <tbody>         <tr>           <td>TelephoneNumbers</td>           <td>A list of telephone numbers you need to bind information from payload.</td>         </tr>         <tr>           <td>AccountType</td>           <td>Can be RESIDENTIAL or BUSINESS.  The element is required.</td>         </tr>         <tr>           <td>ListingType</td>           <td>Can be LISTED, NON_LISTED or NON_PUBLISHED. The element is required</td>         </tr>         <tr>           <td>ListingName</td>           <td>Inner fields: FirstName, FirstName2, LastName, Designation, TitleOfLineage, TitleOfAddress, TitleOfAddress2, TitleOfLineageName2, TitleOfAddressName2, TitleOfAddress2Name2, PlaceListingAs.</td>         </tr>         <tr>           <td>ListAddress</td>           <td>Can be true or false. The element is required.</td>         </tr>         <tr>           <td>Address</td>           <td>This field is required. Inner fields: HousePrefix, HouseNumber, HouseSuffix, PreDirectional, StreetName, StreetSuffix, PostDirectional, AddressLine2, City, StateCode, Zip, PlusFour, AddressType</td>         </tr>       </tbody>     </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_orderid_put_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_dldas_orderid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_dldas_orderid_put`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_dldas_orderid_put`")

        resource_path = '/accounts/{accountId}/dldas/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_dldas_post(self, account_id, **kwargs):
        """
        
        Create DLDA order to associate the street address with the telephone number. The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>TelephoneNumbers</td>       <td>A list of telephone numbers you need to bind information from payload.</td>     </tr>     <tr>       <td>SubscriberType</td>       <td>Can be RESIDENTIAL or BUSINESS.  The element is required.</td>     </tr>     <tr>       <td>ListingType</td>       <td>Can be LISTED, NON_LISTED or NON_PUBLISHED. The element is required</td>     </tr>     <tr>       <td>ListingName</td>       <td>This field is required. Inner fields: FirstName (this field is required in case RESIDENTIAL SubscriberType is chosen), FirstName2, LastName (this field is required), Designation, TitleOfLineage, TitleOfAddress, TitleOfAddress2, TitleOfLineageName2, TitleOfAddressName2, TitleOfAddress2Name2, and PlaceListingAs are optional<br>Please see the note below on sorting of Business Listings.</td>     </tr>     <tr>       <td>ListAddress</td>       <td>Can be true or false. The element is required.</td>     </tr>     <tr>       <td>Address</td>       <td>This field is required. Inner fields: HousePrefix, HouseNumber, HouseSuffix, PreDirectional, StreetName, StreetSuffix, PostDirectional, AddressLine2, City, StateCode, Zip, PlusFour and AddressType=DLDA.<br>City, HouseNumber, StreetName, City, State and Zipcode are required fields.</td>     </tr>   </tbody> </table> <b>Business Listings...</b> <br>Business Listings sort differently than Residential Listings, and must be submitted accordingly.  Since Business Listings sort starting at the beginning of the name, where Residential Listings sort on Last Name, the parts of the business name that will govern the sorting need to be entered in the LastName field.  For example, Joe's Pizza sorts starting with Joe, so the entire business name would be entered in the LastName field, and the Firstname could be left blank.  If there was a portion of the name that was not important from a sorting perspective (perhaps \"the best pizza in town\"), that portion could be placed in the FirstName field.<br> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_dldas_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_dldas_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_dldas_post_with_http_info(self, account_id, **kwargs):
        """
        
        Create DLDA order to associate the street address with the telephone number. The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>TelephoneNumbers</td>       <td>A list of telephone numbers you need to bind information from payload.</td>     </tr>     <tr>       <td>SubscriberType</td>       <td>Can be RESIDENTIAL or BUSINESS.  The element is required.</td>     </tr>     <tr>       <td>ListingType</td>       <td>Can be LISTED, NON_LISTED or NON_PUBLISHED. The element is required</td>     </tr>     <tr>       <td>ListingName</td>       <td>This field is required. Inner fields: FirstName (this field is required in case RESIDENTIAL SubscriberType is chosen), FirstName2, LastName (this field is required), Designation, TitleOfLineage, TitleOfAddress, TitleOfAddress2, TitleOfLineageName2, TitleOfAddressName2, TitleOfAddress2Name2, and PlaceListingAs are optional<br>Please see the note below on sorting of Business Listings.</td>     </tr>     <tr>       <td>ListAddress</td>       <td>Can be true or false. The element is required.</td>     </tr>     <tr>       <td>Address</td>       <td>This field is required. Inner fields: HousePrefix, HouseNumber, HouseSuffix, PreDirectional, StreetName, StreetSuffix, PostDirectional, AddressLine2, City, StateCode, Zip, PlusFour and AddressType=DLDA.<br>City, HouseNumber, StreetName, City, State and Zipcode are required fields.</td>     </tr>   </tbody> </table> <b>Business Listings...</b> <br>Business Listings sort differently than Residential Listings, and must be submitted accordingly.  Since Business Listings sort starting at the beginning of the name, where Residential Listings sort on Last Name, the parts of the business name that will govern the sorting need to be entered in the LastName field.  For example, Joe's Pizza sorts starting with Joe, so the entire business name would be entered in the LastName field, and the Firstname could be left blank.  If there was a portion of the name that was not important from a sorting perspective (perhaps \"the best pizza in town\"), that portion could be placed in the FirstName field.<br> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_dldas_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_dldas_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_dldas_post`")

        resource_path = '/accounts/{accountId}/dldas'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_e911s_get(self, account_id, **kwargs):
        """
        
        Retrieve a list of the E911 orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_e911s_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param list[str] status: The status of the E911 order being searched for.
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str customer_order_id: The Customer Order ID is an ID assigned by the account owner to provide a reference number for the E911 order.
        :param str modified_date_from: For Date-based searches, the starting date of a date range that will be used to find E911 Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str modified_date_to: For Date-based searches, the ending date of a date range that will be used to find E911 Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str created_date_from: Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd
        :param str created_date_to: Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd
        :param str last_modified_after: Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd
        :param str last_modified_by: This is the user-name of the user that last modified the E911 Order.
        :param str order_id_fragment: This search parameter represents the internal Bandwidth Dashboard ID that has been assigned to the E911 Order.  This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.
        :param bool order_details: If set to true, a list of order details will be displayed instead the summary information.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_e911s_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_e911s_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_e911s_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieve a list of the E911 orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_e911s_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param list[str] status: The status of the E911 order being searched for.
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str customer_order_id: The Customer Order ID is an ID assigned by the account owner to provide a reference number for the E911 order.
        :param str modified_date_from: For Date-based searches, the starting date of a date range that will be used to find E911 Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str modified_date_to: For Date-based searches, the ending date of a date range that will be used to find E911 Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str created_date_from: Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd
        :param str created_date_to: Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd
        :param str last_modified_after: Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd
        :param str last_modified_by: This is the user-name of the user that last modified the E911 Order.
        :param str order_id_fragment: This search parameter represents the internal Bandwidth Dashboard ID that has been assigned to the E911 Order.  This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.
        :param bool order_details: If set to true, a list of order details will be displayed instead the summary information.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'status', 'tn', 'customer_order_id', 'modified_date_from', 'modified_date_to', 'created_date_from', 'created_date_to', 'last_modified_after', 'last_modified_by', 'order_id_fragment', 'order_details']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_e911s_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_e911s_get`")

        resource_path = '/accounts/{accountId}/e911s'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'status' in params:
            query_params['status'] = params['status']
        if 'tn' in params:
            query_params['tn'] = params['tn']
        if 'customer_order_id' in params:
            query_params['customerOrderId'] = params['customer_order_id']
        if 'modified_date_from' in params:
            query_params['modifiedDateFrom'] = params['modified_date_from']
        if 'modified_date_to' in params:
            query_params['modifiedDateTo'] = params['modified_date_to']
        if 'created_date_from' in params:
            query_params['createdDateFrom'] = params['created_date_from']
        if 'created_date_to' in params:
            query_params['createdDateTo'] = params['created_date_to']
        if 'last_modified_after' in params:
            query_params['lastModifiedAfter'] = params['last_modified_after']
        if 'last_modified_by' in params:
            query_params['lastModifiedBy'] = params['last_modified_by']
        if 'order_id_fragment' in params:
            query_params['orderIdFragment'] = params['order_id_fragment']
        if 'order_details' in params:
            query_params['orderDetails'] = params['order_details']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_e911s_orderid_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve information about a E911 Order with specified ID. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_e911s_orderid_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_e911s_orderid_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_e911s_orderid_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_e911s_orderid_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve information about a E911 Order with specified ID. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_e911s_orderid_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_e911s_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_e911s_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_e911s_orderid_get`")

        resource_path = '/accounts/{accountId}/e911s/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_e911s_orderid_history_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the history information associated with an order 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_e911s_orderid_history_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_e911s_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_e911s_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_e911s_orderid_history_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the history information associated with an order 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_e911s_orderid_history_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_e911s_orderid_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_e911s_orderid_history_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_e911s_orderid_history_get`")

        resource_path = '/accounts/{accountId}/e911s/{orderid}/history'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_e911s_post(self, account_id, **kwargs):
        """
        
        Create E911 order to associate the address with the telephone number. The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>TelephoneNumbers</td>       <td>A list of telephone numbers you need link to the street address.</td>     </tr>     <tr>       <td>CallerName</td>       <td>CallerName that will be linked to TNs. This field is required in the case of a new address assignment.</td>     </tr>     <tr>       <td>Address</td>       <td>This field is required in the case of a new address assignment.  Inner fields: HousePrefix, HouseNumber, HouseSuffix, PreDirectional, StreetName, StreetSuffix, PostDirectional, AddressLine2, City, StateCode, Zip, PlusFour.  Streetname, City, and State are required.  House Number is currently required, although this enforcement may be relaxed in the future.</td>     </tr>     <tr>       <td>DeleteTNSpecificE911Address</td>       <td>Can be true or false. If value is true then Address and CallerName should not be specified.</td>     </tr>   </tbody> </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_e911s_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_e911s_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_e911s_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_e911s_post_with_http_info(self, account_id, **kwargs):
        """
        
        Create E911 order to associate the address with the telephone number. The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>TelephoneNumbers</td>       <td>A list of telephone numbers you need link to the street address.</td>     </tr>     <tr>       <td>CallerName</td>       <td>CallerName that will be linked to TNs. This field is required in the case of a new address assignment.</td>     </tr>     <tr>       <td>Address</td>       <td>This field is required in the case of a new address assignment.  Inner fields: HousePrefix, HouseNumber, HouseSuffix, PreDirectional, StreetName, StreetSuffix, PostDirectional, AddressLine2, City, StateCode, Zip, PlusFour.  Streetname, City, and State are required.  House Number is currently required, although this enforcement may be relaxed in the future.</td>     </tr>     <tr>       <td>DeleteTNSpecificE911Address</td>       <td>Can be true or false. If value is true then Address and CallerName should not be specified.</td>     </tr>   </tbody> </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_e911s_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_e911s_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_e911s_post`")

        resource_path = '/accounts/{accountId}/e911s'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_external_tns_get(self, account_id, **kwargs):
        """
        
        Retrieve a list of the externalTns orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_external_tns_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param list[str] status: The status of the TN Option order being searched for.
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str customer_order_id: The Customer Order ID is an ID assigned by the account owner to provide a reference number for the TN Option order.
        :param str created_date_from: Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd
        :param str created_date_to: Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd
        :param str order_id_fragment: This search parameter represents the internal Bandwidth Dashboard ID that has been assigned to the TN Option Order.  This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.
        :param str action: whether or not the results should be restricted to IMPORT or REMOVE orders.\"
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_external_tns_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_external_tns_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_external_tns_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieve a list of the externalTns orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_external_tns_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param list[str] status: The status of the TN Option order being searched for.
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str customer_order_id: The Customer Order ID is an ID assigned by the account owner to provide a reference number for the TN Option order.
        :param str created_date_from: Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd
        :param str created_date_to: Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd
        :param str order_id_fragment: This search parameter represents the internal Bandwidth Dashboard ID that has been assigned to the TN Option Order.  This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.
        :param str action: whether or not the results should be restricted to IMPORT or REMOVE orders.\"
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'status', 'tn', 'customer_order_id', 'created_date_from', 'created_date_to', 'order_id_fragment', 'action']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_external_tns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_external_tns_get`")

        resource_path = '/accounts/{accountId}/externalTns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'status' in params:
            query_params['status'] = params['status']
        if 'tn' in params:
            query_params['tn'] = params['tn']
        if 'customer_order_id' in params:
            query_params['customerOrderId'] = params['customer_order_id']
        if 'created_date_from' in params:
            query_params['createdDateFrom'] = params['created_date_from']
        if 'created_date_to' in params:
            query_params['createdDateTo'] = params['created_date_to']
        if 'order_id_fragment' in params:
            query_params['orderIdFragment'] = params['order_id_fragment']
        if 'action' in params:
            query_params['action'] = params['action']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_external_tns_orderid_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve information about a externalTns order with specified ID. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_external_tns_orderid_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_external_tns_orderid_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_external_tns_orderid_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_external_tns_orderid_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve information about a externalTns order with specified ID. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_external_tns_orderid_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_external_tns_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_external_tns_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_external_tns_orderid_get`")

        resource_path = '/accounts/{accountId}/externalTns/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_external_tns_post(self, account_id, **kwargs):
        """
        
        Create a externalTns order to add or remove telephone numbers provided by the customer from the Bandwidth network. Note: the attempt to import a telephone number that is already present in the account will *not* create an error, but will reset all of the  attributes of that telephone number in the Dashboard system as if the telephone number was being imported for the first time The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>CustomerOrderID</td>       <td>An order ID created by the customer for their tracking purposes</td>     </tr>     <tr>       <td>SiteId</td>       <td>(Required) The ID of the Site that the Telephone Numbers are to be provisioned to.</td>     </tr>     <tr>       <td>SipPeerId</td>       <td>(Optional) The ID of the SIP Peer that the Telephone Numbers are to be provisioned to.</td>     </tr>     <tr>       <td>Action</td>       <td>(Required) Indentify the action on external TNs. Allowed values... IMPORT or REMOVE.</td>     </tr>   </tbody> </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_external_tns_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_external_tns_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_external_tns_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_external_tns_post_with_http_info(self, account_id, **kwargs):
        """
        
        Create a externalTns order to add or remove telephone numbers provided by the customer from the Bandwidth network. Note: the attempt to import a telephone number that is already present in the account will *not* create an error, but will reset all of the  attributes of that telephone number in the Dashboard system as if the telephone number was being imported for the first time The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>CustomerOrderID</td>       <td>An order ID created by the customer for their tracking purposes</td>     </tr>     <tr>       <td>SiteId</td>       <td>(Required) The ID of the Site that the Telephone Numbers are to be provisioned to.</td>     </tr>     <tr>       <td>SipPeerId</td>       <td>(Optional) The ID of the SIP Peer that the Telephone Numbers are to be provisioned to.</td>     </tr>     <tr>       <td>Action</td>       <td>(Required) Indentify the action on external TNs. Allowed values... IMPORT or REMOVE.</td>     </tr>   </tbody> </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_external_tns_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_external_tns_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_external_tns_post`")

        resource_path = '/accounts/{accountId}/externalTns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_get(self, account_id, **kwargs):
        """
        
        This API call retrieves information about the account indicated by the Account ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_get_with_http_info(self, account_id, **kwargs):
        """
        
        This API call retrieves information about the account indicated by the Account ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_get`")

        resource_path = '/accounts/{accountId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_hosts_get(self, account_id, **kwargs):
        """
        
        Retrieve information about the hosts of account, as guided by optional search parameters.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_hosts_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str host: An IP address or subnet (CIDR format) associated with the account. Filter for subnet applies by exact match.
        :param str type: A status value to filter the hosts returned in the payload.  Values that can be accepted include: <ul>     <li>SMS</li>     <li>TERMINATION</li>     <li>ORIGINATION</li> </ul> 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_hosts_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_hosts_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_hosts_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieve information about the hosts of account, as guided by optional search parameters.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_hosts_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str host: An IP address or subnet (CIDR format) associated with the account. Filter for subnet applies by exact match.
        :param str type: A status value to filter the hosts returned in the payload.  Values that can be accepted include: <ul>     <li>SMS</li>     <li>TERMINATION</li>     <li>ORIGINATION</li> </ul> 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'host', 'type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_hosts_get`")

        resource_path = '/accounts/{accountId}/hosts'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'host' in params:
            query_params['host'] = params['host']
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_inservice_numbers_get(self, account_id, **kwargs):
        """
        
        Retrieves a list of in-service phone numbers associated with the account ID. There are multiple search parameters for searching for in-service numbers: <ul>     <li>size and page for pagination</li>     <li>area code</li>     <li>Npa-Nxx</li>     <li>LATA</li>     <li>state</li>     <li>rate center</li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_inservice_numbers_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param int page: the page to fetch in a paginated collection
        :param int size: the number of TNs to retrieve
        :param int areacode: An Area Code search filter - all returned TNs will be in the entered Area Code
        :param int npanxx: An NPA NXX search filter - all returned TNs will be in the entered NPA NXX dial plan
        :param int lata: A Rate Center search filter - all returned TNs will be in the entered Rate Center.  Typically this is a 3 or 5 digit value
        :param str state: A State search filter - all returned TNs will be in the entered State.  This is a 2-character State or Province abbreviation
        :param str ratecenter: A Rate Center search filter - all returned TNs will be in the entered Rate Center.  This Rate Center must be combined with a State in the query.  If State is not included in the query then the queryu will fail.
        :param date startdate: The starting date of a date range that will filter numbers based on activation or other change date
        :param date enddate: The ending date of a date range
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_inservice_numbers_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_inservice_numbers_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_inservice_numbers_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieves a list of in-service phone numbers associated with the account ID. There are multiple search parameters for searching for in-service numbers: <ul>     <li>size and page for pagination</li>     <li>area code</li>     <li>Npa-Nxx</li>     <li>LATA</li>     <li>state</li>     <li>rate center</li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_inservice_numbers_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param int page: the page to fetch in a paginated collection
        :param int size: the number of TNs to retrieve
        :param int areacode: An Area Code search filter - all returned TNs will be in the entered Area Code
        :param int npanxx: An NPA NXX search filter - all returned TNs will be in the entered NPA NXX dial plan
        :param int lata: A Rate Center search filter - all returned TNs will be in the entered Rate Center.  Typically this is a 3 or 5 digit value
        :param str state: A State search filter - all returned TNs will be in the entered State.  This is a 2-character State or Province abbreviation
        :param str ratecenter: A Rate Center search filter - all returned TNs will be in the entered Rate Center.  This Rate Center must be combined with a State in the query.  If State is not included in the query then the queryu will fail.
        :param date startdate: The starting date of a date range that will filter numbers based on activation or other change date
        :param date enddate: The ending date of a date range
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page', 'size', 'areacode', 'npanxx', 'lata', 'state', 'ratecenter', 'startdate', 'enddate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_inservice_numbers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_inservice_numbers_get`")

        if 'areacode' in params and params['areacode'] > 999.0:
            raise ValueError("Invalid value for parameter `areacode` when calling `accounts_account_id_inservice_numbers_get`, must be a value less than or equal to  `999.0`")
        if 'areacode' in params and params['areacode'] < 200.0:
            raise ValueError("Invalid value for parameter `areacode` when calling `accounts_account_id_inservice_numbers_get`, must be a value greater than or equal to `200.0`")
        if 'npanxx' in params and params['npanxx'] > 999999.0:
            raise ValueError("Invalid value for parameter `npanxx` when calling `accounts_account_id_inservice_numbers_get`, must be a value less than or equal to  `999999.0`")
        if 'npanxx' in params and params['npanxx'] < 200000.0:
            raise ValueError("Invalid value for parameter `npanxx` when calling `accounts_account_id_inservice_numbers_get`, must be a value greater than or equal to `200000.0`")
        if 'lata' in params and params['lata'] > 99999.0:
            raise ValueError("Invalid value for parameter `lata` when calling `accounts_account_id_inservice_numbers_get`, must be a value less than or equal to  `99999.0`")
        if 'lata' in params and params['lata'] < 1.0:
            raise ValueError("Invalid value for parameter `lata` when calling `accounts_account_id_inservice_numbers_get`, must be a value greater than or equal to `1.0`")
        resource_path = '/accounts/{accountId}/inserviceNumbers'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'areacode' in params:
            query_params['areacode'] = params['areacode']
        if 'npanxx' in params:
            query_params['npanxx'] = params['npanxx']
        if 'lata' in params:
            query_params['lata'] = params['lata']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'ratecenter' in params:
            query_params['ratecenter'] = params['ratecenter']
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_inservice_numbers_tn_get(self, account_id, tn, **kwargs):
        """
        
        A GET on the number desired will return a 200 OK if the number is in service on the account, or a 404 not found.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_inservice_numbers_tn_get(account_id, tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_inservice_numbers_tn_get_with_http_info(account_id, tn, **kwargs)
        else:
            (data) = self.accounts_account_id_inservice_numbers_tn_get_with_http_info(account_id, tn, **kwargs)
            return data

    def accounts_account_id_inservice_numbers_tn_get_with_http_info(self, account_id, tn, **kwargs):
        """
        
        A GET on the number desired will return a 200 OK if the number is in service on the account, or a 404 not found.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_inservice_numbers_tn_get_with_http_info(account_id, tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_inservice_numbers_tn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_inservice_numbers_tn_get`")
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `accounts_account_id_inservice_numbers_tn_get`")

        resource_path = '/accounts/{accountId}/inserviceNumbers/{tn}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_inservice_numbers_totals_get(self, account_id, **kwargs):
        """
        
        Returns the total number of in-service numbers for the given account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_inservice_numbers_totals_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_inservice_numbers_totals_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_inservice_numbers_totals_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_inservice_numbers_totals_get_with_http_info(self, account_id, **kwargs):
        """
        
        Returns the total number of in-service numbers for the given account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_inservice_numbers_totals_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_inservice_numbers_totals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_inservice_numbers_totals_get`")

        resource_path = '/accounts/{accountId}/inserviceNumbers/totals'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lidbs_get(self, account_id, **kwargs):
        """
        
        Retrieve a list of the LIDB orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lidbs_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str last_modified_after: Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lidbs_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_lidbs_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_lidbs_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieve a list of the LIDB orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lidbs_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str last_modified_after: Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'tn', 'last_modified_after']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lidbs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lidbs_get`")

        resource_path = '/accounts/{accountId}/lidbs'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'tn' in params:
            query_params['tn'] = params['tn']
        if 'last_modified_after' in params:
            query_params['lastModifiedAfter'] = params['last_modified_after']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lidbs_lidbid_get(self, account_id, lidbid, **kwargs):
        """
        
        Retrieve information about a specific Lidb Order identified as the resource. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lidbs_lidbid_get(account_id, lidbid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str lidbid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lidbs_lidbid_get_with_http_info(account_id, lidbid, **kwargs)
        else:
            (data) = self.accounts_account_id_lidbs_lidbid_get_with_http_info(account_id, lidbid, **kwargs)
            return data

    def accounts_account_id_lidbs_lidbid_get_with_http_info(self, account_id, lidbid, **kwargs):
        """
        
        Retrieve information about a specific Lidb Order identified as the resource. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lidbs_lidbid_get_with_http_info(account_id, lidbid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str lidbid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'lidbid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lidbs_lidbid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lidbs_lidbid_get`")
        # verify the required parameter 'lidbid' is set
        if ('lidbid' not in params) or (params['lidbid'] is None):
            raise ValueError("Missing the required parameter `lidbid` when calling `accounts_account_id_lidbs_lidbid_get`")

        resource_path = '/accounts/{accountId}/lidbs/{lidbid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'lidbid' in params:
            path_params['lidbid'] = params['lidbid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lidbs_post(self, account_id, **kwargs):
        """
        
        Create a LIDB order to associate Calling Name Information with a TN or list of CountOfTNs The key data elements in the submission are -     <table style=\"text-align: left; width: 80%;\"      border=\"1\" cellpadding=\"2\" cellspacing=\"2\">       <tbody>         <tr>           <td>TelephoneNumbers</td>           <td>A list of telephone numbers that will all assume the SubscriberInformation that is listed in the payload.  In an enterprise context it is not uncommon for all of the served telephone numbers to use the same string for the Subscriber Information.</td>         </tr>         <tr>           <td>SubscriberInformation</td>           <td>This is the field that is displayed to the user receiving the phone call from the Telephone numbers in the TelephoneNumberList</td>         </tr>         <tr>           <td>UseType</td>           <td>Can be RESIDENTIAL or BUSINESS.  The element is required.</td>         </tr>         <tr>           <td>Visibility</td>           <td>Can be PRIVATE or PUBLIC.   If it is tagged as PRIVATE then the data will be provided, but the display will not be provided on a standard phone call.  The element is required</td>         </tr>         <tr>           <td>CustomerOrderId</td>           <td>The Customer Order ID is an ID assigned by the account owner to provide a reference number for the Order.  The element is optional.</td>         </tr>       </tbody>     </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lidbs_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lidbs_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_lidbs_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_lidbs_post_with_http_info(self, account_id, **kwargs):
        """
        
        Create a LIDB order to associate Calling Name Information with a TN or list of CountOfTNs The key data elements in the submission are -     <table style=\"text-align: left; width: 80%;\"      border=\"1\" cellpadding=\"2\" cellspacing=\"2\">       <tbody>         <tr>           <td>TelephoneNumbers</td>           <td>A list of telephone numbers that will all assume the SubscriberInformation that is listed in the payload.  In an enterprise context it is not uncommon for all of the served telephone numbers to use the same string for the Subscriber Information.</td>         </tr>         <tr>           <td>SubscriberInformation</td>           <td>This is the field that is displayed to the user receiving the phone call from the Telephone numbers in the TelephoneNumberList</td>         </tr>         <tr>           <td>UseType</td>           <td>Can be RESIDENTIAL or BUSINESS.  The element is required.</td>         </tr>         <tr>           <td>Visibility</td>           <td>Can be PRIVATE or PUBLIC.   If it is tagged as PRIVATE then the data will be provided, but the display will not be provided on a standard phone call.  The element is required</td>         </tr>         <tr>           <td>CustomerOrderId</td>           <td>The Customer Order ID is an ID assigned by the account owner to provide a reference number for the Order.  The element is optional.</td>         </tr>       </tbody>     </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lidbs_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lidbs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lidbs_post`")

        resource_path = '/accounts/{accountId}/lidbs'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_line_option_orders_post(self, account_id, **kwargs):
        """
        
        This link is used for configuring multiple telephone numbers with specific attributes:<br/> CNAM, NumberFormat, RPIDFormat, RewriteUser, CallForward, Protected and Sms.<br/> There are some possible attribute values: <ul> <li> TelephoneNumber - [ 10digit ] </li> <li> CallingNameDisplay - [ on | off | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> NumberFormat - [ 10digit | 11digit | e164 | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> RPIDFormat - [ 10digit | 11digit | e164 | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> RewriteUser - [ string | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> CallForward - [ 10digit | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> Protected - [ true | false | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> Sms - [ on | off | <i>unchanged</i>] </li> </ul> Where: <ul> <li type=\"square\"> <i>systemdefault</i> - implies that the element profile value should be removed so that the TN changes back to the default system behavior;</li> <li type=\"square\"> <i>unchanged</i> - the value should remain unchanged - implies a read before write model.</li> <li type=\"square\"><u>Leaving the element out of the payload is equivalent to <i>unchanged</i>.</u></li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_line_option_orders_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_line_option_orders_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_line_option_orders_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_line_option_orders_post_with_http_info(self, account_id, **kwargs):
        """
        
        This link is used for configuring multiple telephone numbers with specific attributes:<br/> CNAM, NumberFormat, RPIDFormat, RewriteUser, CallForward, Protected and Sms.<br/> There are some possible attribute values: <ul> <li> TelephoneNumber - [ 10digit ] </li> <li> CallingNameDisplay - [ on | off | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> NumberFormat - [ 10digit | 11digit | e164 | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> RPIDFormat - [ 10digit | 11digit | e164 | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> RewriteUser - [ string | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> CallForward - [ 10digit | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> Protected - [ true | false | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> Sms - [ on | off | <i>unchanged</i>] </li> </ul> Where: <ul> <li type=\"square\"> <i>systemdefault</i> - implies that the element profile value should be removed so that the TN changes back to the default system behavior;</li> <li type=\"square\"> <i>unchanged</i> - the value should remain unchanged - implies a read before write model.</li> <li type=\"square\"><u>Leaving the element out of the payload is equivalent to <i>unchanged</i>.</u></li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_line_option_orders_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_line_option_orders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_line_option_orders_post`")

        resource_path = '/accounts/{accountId}/lineOptionOrders'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lnpchecker_post(self, account_id, **kwargs):
        """
        
        Request portability information on a set of TNs  

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lnpchecker_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str full_check: <table>     <tr>         <th>parameter value</th>         <th>description</th>     </tr>     <tr>         <td>true</td>         <td>additional information will be provided on the losing carriers associated with the listed numbers</td>     </tr>     <tr>         <td>false</td>         <td>return only rate center information</td>     </tr>     <tr>         <td>onnetportability</td>         <td>identical in meaning to <i>&quot;true&quot;</i> value</td>     </tr>     <tr>         <td>offnetportability</td>         <td>in addition to on-net information return off-net port information in <i>&lt;PartnerSupportedRateCenters&gt;</i> element with Partner/Vendor that the port will be supported on.          Contains a list of the TNs that are supported in partner rate centers, and for which we will manually execute a port if requested         </td>     </tr> </table> 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lnpchecker_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_lnpchecker_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_lnpchecker_post_with_http_info(self, account_id, **kwargs):
        """
        
        Request portability information on a set of TNs  

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lnpchecker_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str full_check: <table>     <tr>         <th>parameter value</th>         <th>description</th>     </tr>     <tr>         <td>true</td>         <td>additional information will be provided on the losing carriers associated with the listed numbers</td>     </tr>     <tr>         <td>false</td>         <td>return only rate center information</td>     </tr>     <tr>         <td>onnetportability</td>         <td>identical in meaning to <i>&quot;true&quot;</i> value</td>     </tr>     <tr>         <td>offnetportability</td>         <td>in addition to on-net information return off-net port information in <i>&lt;PartnerSupportedRateCenters&gt;</i> element with Partner/Vendor that the port will be supported on.          Contains a list of the TNs that are supported in partner rate centers, and for which we will manually execute a port if requested         </td>     </tr> </table> 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'full_check']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lnpchecker_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lnpchecker_post`")

        resource_path = '/accounts/{accountId}/lnpchecker'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'full_check' in params:
            query_params['fullCheck'] = params['full_check']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lsrorders_get(self, account_id, **kwargs):
        """
        
        Retrieves a list of lsrorders.  Various query parameters can be used to filter the list of LSR Orders as documented below. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param list[str] status: The status of the Lsr order being searched for.
        :param str tn: A Telephone Number (TN) that is referenced in the order.
        :param str pon: The PON that is referenced in the Lsr order.
        :param str customer_order_id: The Customer Order ID is an ID assigned by the account owner to provide a reference number for the Port.
        :param str order_id_fragment: This search parameter represents the internal Bandwidth Dashboard ID that has been assigned to the Lsr Order.  This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.
        :param date created_date_from: Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd
        :param date created_date_to: Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lsrorders_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_lsrorders_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_lsrorders_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieves a list of lsrorders.  Various query parameters can be used to filter the list of LSR Orders as documented below. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param list[str] status: The status of the Lsr order being searched for.
        :param str tn: A Telephone Number (TN) that is referenced in the order.
        :param str pon: The PON that is referenced in the Lsr order.
        :param str customer_order_id: The Customer Order ID is an ID assigned by the account owner to provide a reference number for the Port.
        :param str order_id_fragment: This search parameter represents the internal Bandwidth Dashboard ID that has been assigned to the Lsr Order.  This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.
        :param date created_date_from: Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd
        :param date created_date_to: Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'status', 'tn', 'pon', 'customer_order_id', 'order_id_fragment', 'created_date_from', 'created_date_to']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lsrorders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lsrorders_get`")

        resource_path = '/accounts/{accountId}/lsrorders'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'status' in params:
            query_params['status'] = params['status']
        if 'tn' in params:
            query_params['tn'] = params['tn']
        if 'pon' in params:
            query_params['pon'] = params['pon']
        if 'customer_order_id' in params:
            query_params['customerOrderId'] = params['customer_order_id']
        if 'order_id_fragment' in params:
            query_params['orderIdFragment'] = params['order_id_fragment']
        if 'created_date_from' in params:
            query_params['createdDateFrom'] = params['created_date_from']
        if 'created_date_to' in params:
            query_params['createdDateTo'] = params['created_date_to']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lsrorders_orderid_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the information associated with the specified lsr ID number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lsrorders_orderid_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_lsrorders_orderid_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_lsrorders_orderid_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the information associated with the specified lsr ID number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lsrorders_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lsrorders_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_lsrorders_orderid_get`")

        resource_path = '/accounts/{accountId}/lsrorders/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lsrorders_orderid_history_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the history of the specified lsr order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_history_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lsrorders_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_lsrorders_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_lsrorders_orderid_history_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the history of the specified lsr order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_history_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lsrorders_orderid_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lsrorders_orderid_history_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_lsrorders_orderid_history_get`")

        resource_path = '/accounts/{accountId}/lsrorders/{orderid}/history'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lsrorders_orderid_notes_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the set of notes associated with an order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_notes_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lsrorders_orderid_notes_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_lsrorders_orderid_notes_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_lsrorders_orderid_notes_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the set of notes associated with an order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_notes_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lsrorders_orderid_notes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lsrorders_orderid_notes_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_lsrorders_orderid_notes_get`")

        resource_path = '/accounts/{accountId}/lsrorders/{orderid}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lsrorders_orderid_notes_post(self, account_id, orderid, **kwargs):
        """
        
        Updates the Notes resource by adding a note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_notes_post(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lsrorders_orderid_notes_post_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_lsrorders_orderid_notes_post_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_lsrorders_orderid_notes_post_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Updates the Notes resource by adding a note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_notes_post_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lsrorders_orderid_notes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lsrorders_orderid_notes_post`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_lsrorders_orderid_notes_post`")

        resource_path = '/accounts/{accountId}/lsrorders/{orderid}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lsrorders_orderid_put(self, account_id, orderid, **kwargs):
        """
        
        Updates the information associated with the specified LSR.  This is also used to cancel an order, by changing the order status field to canceled.  This is the only case where the status can be changed, and when this is done, all other fields are left as they were prior to the cancellation.  Please see the example below. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_put(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lsrorders_orderid_put_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_lsrorders_orderid_put_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_lsrorders_orderid_put_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Updates the information associated with the specified LSR.  This is also used to cancel an order, by changing the order status field to canceled.  This is the only case where the status can be changed, and when this is done, all other fields are left as they were prior to the cancellation.  Please see the example below. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_orderid_put_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lsrorders_orderid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lsrorders_orderid_put`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_lsrorders_orderid_put`")

        resource_path = '/accounts/{accountId}/lsrorders/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_lsrorders_post(self, account_id, **kwargs):
        """
        
        A POST creates a lsrorder request to initiate a port-out action.<br> The payload fields are described below...<br> <table style=\"text-align: left; width: 80%;\"      border=\"1\" cellpadding=\"2\" cellspacing=\"2\">       <tbody>         <tr>           <td>Pon</td>           <td>The Pon is customer specified order indentifier field. Allowed alphanumeric and \"#\",\"-\",\"_\". Up to 25 characters long. (required).</td>         </tr>         <tr>           <td>CustomerOrderId</td>           <td>The CustomerOrderId is customer specified order indentifier field. Allowed alphanumeric, spaces and dashes. Up to 40 characters long. (optional).</td>         </tr>         <tr>           <td>SPID</td>           <td>Identifier used in porting process. If account is no multi-SPID option - default with account value, otherwise value is required. Up to 4 characters long. (required)</td>         </tr>         <tr>           <td>BillingTelephoneNumber</td>           <td>Non-tollfree 10 digit phone number (optional).</td>         </tr>         <tr>           <td>RequestedFocDate</td>           <td>optional (next day if not specified).</td>         </tr>         <tr>           <td>SubscriberType</td>           <td>Subscriber type. BUSINESS | RESEDENTIAL (optional) (RESEDENTIAL if not specified).</td>         </tr>         <tr>           <td>BusinessName</td>           <td>Subscriber business name for BUSINESS SubscriberType. Up to 25 characters long. (required BusinessName or LastName).</td>         </tr>         <tr>           <td>LastName</td>           <td>Subscriber last name for RESEDENTIAL SubscriberType. Up to 25 characters long. (required BusinessName or LastName).</td>         </tr>         <tr>           <td>FirstName</td>           <td>Subscriber first name for RESEDENTIAL SubscriberType. Up to 25 characters long. (optional).</td>         </tr>         <tr>           <td>MiddleInitial</td>           <td>Subscriber middle initial for RESEDENTIAL SubscriberType. 1 character (optional).</td>         </tr>                         <tr>           <td>AccountNumber</td>           <td>AccountNumber.  Alphanumeric, up to 32 characters. (optional).</td>         </tr>                         <tr>           <td>PinNumber</td>           <td>PinNumber. Alphanumeric, up to 10 characters. (optional).</td>         </tr>         <tr>           <td>AuthorizingPerson</td>           <td>AuthorizingPerson. Alphanumeric, up to 100 characters (required).</td>         </tr>         <tr>           <td>HousePrefix</td>           <td>HousePrefix. Alphanumeric, up to 6 characters.</td>         </tr>         <tr>           <td>HouseNumber</td>           <td>HouseNumber. Alphanumeric, up to 45 characters  (required).</td>         </tr>         <tr>           <td>HouseSuffix</td>           <td>HouseSuffix. Alphanumeric, up to 45 characters.</td>         </tr>         <tr>           <td>PreDirectional</td>           <td>PreDirectional. Alphanumeric, up to 2 characters.</td>         </tr>         <tr>           <td>StreetName</td>           <td>StreetName. Alphanumeric, up to 200 characters  (required).</td>         </tr>         <tr>           <td>StreetSuffix</td>           <td>StreetSuffix. Alphanumeric, up to 45 characters.</td>         </tr>         <tr>           <td>PostDirectional</td>           <td>PostDirectional. Alphanumeric, up to 2 characters.</td>         </tr>         <tr>           <td>AddressLine2</td>           <td>AddressLine2. Alphanumeric, up to 200 characters.</td>         </tr>         <tr>           <td>County</td>           <td>County. Alphanumeric, up to 45 characters.</td>         </tr>         <tr>           <td>City</td>           <td>City. Alphanumeric, up to 100 characters  (required).</td>         </tr>         <tr>           <td>StateCode</td>           <td>StateCode. Alphanumeric, 2 characters  (required).</td>         </tr>         <tr>           <td>Zip</td>           <td>Zip code. Allowed formats: 5 numbers, 5+4 or Canadian  (required).</td>         </tr>         <tr>           <td>ListOfTelephoneNumbers</td>           <td>List of tns to be processed  (required).</td>         </tr>         </tbody>     </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_lsrorders_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_lsrorders_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_lsrorders_post_with_http_info(self, account_id, **kwargs):
        """
        
        A POST creates a lsrorder request to initiate a port-out action.<br> The payload fields are described below...<br> <table style=\"text-align: left; width: 80%;\"      border=\"1\" cellpadding=\"2\" cellspacing=\"2\">       <tbody>         <tr>           <td>Pon</td>           <td>The Pon is customer specified order indentifier field. Allowed alphanumeric and \"#\",\"-\",\"_\". Up to 25 characters long. (required).</td>         </tr>         <tr>           <td>CustomerOrderId</td>           <td>The CustomerOrderId is customer specified order indentifier field. Allowed alphanumeric, spaces and dashes. Up to 40 characters long. (optional).</td>         </tr>         <tr>           <td>SPID</td>           <td>Identifier used in porting process. If account is no multi-SPID option - default with account value, otherwise value is required. Up to 4 characters long. (required)</td>         </tr>         <tr>           <td>BillingTelephoneNumber</td>           <td>Non-tollfree 10 digit phone number (optional).</td>         </tr>         <tr>           <td>RequestedFocDate</td>           <td>optional (next day if not specified).</td>         </tr>         <tr>           <td>SubscriberType</td>           <td>Subscriber type. BUSINESS | RESEDENTIAL (optional) (RESEDENTIAL if not specified).</td>         </tr>         <tr>           <td>BusinessName</td>           <td>Subscriber business name for BUSINESS SubscriberType. Up to 25 characters long. (required BusinessName or LastName).</td>         </tr>         <tr>           <td>LastName</td>           <td>Subscriber last name for RESEDENTIAL SubscriberType. Up to 25 characters long. (required BusinessName or LastName).</td>         </tr>         <tr>           <td>FirstName</td>           <td>Subscriber first name for RESEDENTIAL SubscriberType. Up to 25 characters long. (optional).</td>         </tr>         <tr>           <td>MiddleInitial</td>           <td>Subscriber middle initial for RESEDENTIAL SubscriberType. 1 character (optional).</td>         </tr>                         <tr>           <td>AccountNumber</td>           <td>AccountNumber.  Alphanumeric, up to 32 characters. (optional).</td>         </tr>                         <tr>           <td>PinNumber</td>           <td>PinNumber. Alphanumeric, up to 10 characters. (optional).</td>         </tr>         <tr>           <td>AuthorizingPerson</td>           <td>AuthorizingPerson. Alphanumeric, up to 100 characters (required).</td>         </tr>         <tr>           <td>HousePrefix</td>           <td>HousePrefix. Alphanumeric, up to 6 characters.</td>         </tr>         <tr>           <td>HouseNumber</td>           <td>HouseNumber. Alphanumeric, up to 45 characters  (required).</td>         </tr>         <tr>           <td>HouseSuffix</td>           <td>HouseSuffix. Alphanumeric, up to 45 characters.</td>         </tr>         <tr>           <td>PreDirectional</td>           <td>PreDirectional. Alphanumeric, up to 2 characters.</td>         </tr>         <tr>           <td>StreetName</td>           <td>StreetName. Alphanumeric, up to 200 characters  (required).</td>         </tr>         <tr>           <td>StreetSuffix</td>           <td>StreetSuffix. Alphanumeric, up to 45 characters.</td>         </tr>         <tr>           <td>PostDirectional</td>           <td>PostDirectional. Alphanumeric, up to 2 characters.</td>         </tr>         <tr>           <td>AddressLine2</td>           <td>AddressLine2. Alphanumeric, up to 200 characters.</td>         </tr>         <tr>           <td>County</td>           <td>County. Alphanumeric, up to 45 characters.</td>         </tr>         <tr>           <td>City</td>           <td>City. Alphanumeric, up to 100 characters  (required).</td>         </tr>         <tr>           <td>StateCode</td>           <td>StateCode. Alphanumeric, 2 characters  (required).</td>         </tr>         <tr>           <td>Zip</td>           <td>Zip code. Allowed formats: 5 numbers, 5+4 or Canadian  (required).</td>         </tr>         <tr>           <td>ListOfTelephoneNumbers</td>           <td>List of tns to be processed  (required).</td>         </tr>         </tbody>     </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_lsrorders_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_lsrorders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_lsrorders_post`")

        resource_path = '/accounts/{accountId}/lsrorders'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_get(self, account_id, page, size, **kwargs):
        """
        
        GET is used to retrieve order ids and order details for previously attempted Telephone Number orders.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_get(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: All Order retrievals must be paginated, using page and size indicators.  The page parameter contains the order-id that is to start the page, or \"1\" in the case of the first page. (required)
        :param int size: The size parameter indicates the number of orders to return in the payload (required)
        :param str customer_order_id: The order ID that the Customer / Account assigned to the Order
        :param str status: the status of the orders that should be in the returned set
        :param str userid: The userid of the user that submitted the new number order
        :param date startdate: The first day of the search date range for a date-range-limited search of net number orders.  The format is YY-MM-DD.
        :param date enddate: The last day of the search date range for a date-range-limited search of net number orders.  The format is YY-MM-DD.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_get_with_http_info(account_id, page, size, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_get_with_http_info(account_id, page, size, **kwargs)
            return data

    def accounts_account_id_orders_get_with_http_info(self, account_id, page, size, **kwargs):
        """
        
        GET is used to retrieve order ids and order details for previously attempted Telephone Number orders.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_get_with_http_info(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: All Order retrievals must be paginated, using page and size indicators.  The page parameter contains the order-id that is to start the page, or \"1\" in the case of the first page. (required)
        :param int size: The size parameter indicates the number of orders to return in the payload (required)
        :param str customer_order_id: The order ID that the Customer / Account assigned to the Order
        :param str status: the status of the orders that should be in the returned set
        :param str userid: The userid of the user that submitted the new number order
        :param date startdate: The first day of the search date range for a date-range-limited search of net number orders.  The format is YY-MM-DD.
        :param date enddate: The last day of the search date range for a date-range-limited search of net number orders.  The format is YY-MM-DD.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page', 'size', 'customer_order_id', 'status', 'userid', 'startdate', 'enddate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_get`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `accounts_account_id_orders_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `accounts_account_id_orders_get`")

        resource_path = '/accounts/{accountId}/orders'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'customer_order_id' in params:
            query_params['customerOrderId'] = params['customer_order_id']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'userid' in params:
            query_params['userid'] = params['userid']
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_area_codes_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the area codes of the phone numbers from the specified order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_area_codes_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_area_codes_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_area_codes_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_area_codes_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the area codes of the phone numbers from the specified order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_area_codes_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_area_codes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_area_codes_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_area_codes_get`")

        resource_path = '/accounts/{accountId}/orders/{orderid}/areaCodes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_get(self, account_id, orderid, **kwargs):
        """
        
        GET all of the details associated with an identified order

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param bool tndetail: if true, and extended payload describing details about the ordered telephone numbers will be provided
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        GET all of the details associated with an identified order

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param bool tndetail: if true, and extended payload describing details about the ordered telephone numbers will be provided
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid', 'tndetail']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_get`")

        resource_path = '/accounts/{accountId}/orders/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}
        if 'tndetail' in params:
            query_params['tndetail'] = params['tndetail']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_history_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the history information associated with an order 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_history_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_history_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the history information associated with an order 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_history_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_history_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_history_get`")

        resource_path = '/accounts/{accountId}/orders/{orderid}/history'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_notes_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the set of notes associated with an order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_notes_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_notes_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_notes_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_notes_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the set of notes associated with an order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_notes_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_notes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_notes_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_notes_get`")

        resource_path = '/accounts/{accountId}/orders/{orderid}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_notes_post(self, account_id, orderid, **kwargs):
        """
        
        Updates the Notes resource by adding a note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_notes_post(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_notes_post_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_notes_post_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_notes_post_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Updates the Notes resource by adding a note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_notes_post_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_notes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_notes_post`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_notes_post`")

        resource_path = '/accounts/{accountId}/orders/{orderid}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_npa_nxx_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the Npa-Nxx of the phone numbers from the specified order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_npa_nxx_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_npa_nxx_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_npa_nxx_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_npa_nxx_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the Npa-Nxx of the phone numbers from the specified order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_npa_nxx_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_npa_nxx_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_npa_nxx_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_npa_nxx_get`")

        resource_path = '/accounts/{accountId}/orders/{orderid}/npaNxx'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_put(self, account_id, orderid, **kwargs):
        """
        
        With the introduction of Backorder capabilities, new number orders may stay in backordered state while the order is filled.   While in this state it is possible to update the modifiable fields in the record, as well as to request that backorder processing of the order be ended. The fields that can be updated are... <ul> <li>The order name</li> <li>The customer order id</li> <li>The backordered state.</li> </ul> Specifying a &lt;CloseOrder&gt; value of true will cancel the backorder request, leaving the currently ordered numbers on the account.  No further numbers will be added to the account as a result of the order. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_put(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_put_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_put_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_put_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        With the introduction of Backorder capabilities, new number orders may stay in backordered state while the order is filled.   While in this state it is possible to update the modifiable fields in the record, as well as to request that backorder processing of the order be ended. The fields that can be updated are... <ul> <li>The order name</li> <li>The customer order id</li> <li>The backordered state.</li> </ul> Specifying a &lt;CloseOrder&gt; value of true will cancel the backorder request, leaving the currently ordered numbers on the account.  No further numbers will be added to the account as a result of the order. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_put_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_put`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_put`")

        resource_path = '/accounts/{accountId}/orders/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_tns_get(self, account_id, orderid, **kwargs):
        """
        
        returns a list of phone numbers associated with the ID of a given account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_tns_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_tns_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_tns_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_tns_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        returns a list of phone numbers associated with the ID of a given account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_tns_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_tns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_tns_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_tns_get`")

        resource_path = '/accounts/{accountId}/orders/{orderid}/tns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_orderid_totals_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the total quantity of phone numbers from the specified order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_totals_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_orderid_totals_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_orderid_totals_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_orders_orderid_totals_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the total quantity of phone numbers from the specified order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_orderid_totals_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_orderid_totals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_orderid_totals_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_orders_orderid_totals_get`")

        resource_path = '/accounts/{accountId}/orders/{orderid}/totals'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_orders_post(self, account_id, **kwargs):
        """
        
        <span>A POST creates a request for Telephone Numbers</span> <br> A POST on the /orders resource is used to request that the system provide one or more TNs for use by the account.  The post creates a new number order record to preserve the request, as well as the response of the Bandwidth Dashboard to the request.  A well-formed POST on the /orders resource will create an order record, and return an order-id string that can be used to uniquely identify the new number order request.  The details of success and failure of the request for TNs will be preserved and linked to the returned order id.<br><br> The order-id is returned in the Location Header, allowing the API user immediate access to the order.<br><br> There are multiple ways that new telephone numbers can be requested.  The various request payloads are documented below. <br><br> Common values in <b>all</b> request payloads include: <br> <table>     <tr>         <th>Parameter</th>         <th>Description</th>     </tr>     <tr>         <td>Quantity</td>         <td>The desired quantity of requested numbers. values range from 1-5000. If no quantity is specified, the default of 5000 is returned.</td>     </tr>     <tr>         <td>name</td>         <td>The name of the order. Max length restricted to 50 characters.</td>     </tr>     <tr>         <td>CustomerOrderId</td>         <td>Optional value for Id set by customer</td>     </tr>     <tr>         <td>SiteId</td>         <td>The ID of the Site that the SIP Peer is to be associated with.</td>     </tr>     <tr>         <td>PeerId</td><td>The ID of the SIP Peer that the telephone numbers are to be assigned to.</td>     </tr>     <tr>         <td>PartialAllowed</td>         <td>By default all order submissions are fulfilled partially. Setting the PartialAllowed to false would trigger the entire order to be fulfilled (any error ecnountered such as 1 TN not being available would fail all TNs in the order)<br>             By default, this value is set to false</td>     </tr>     <tr>         <td>BackOrderRequested</td>         <td>BackOrderRequested will indicate to the system that if the entire quantity of numbers is not available on the first attempt to fill the new number order, the request will be repeated periodically until the request is successful or cancelled. Setting the parameter to true indeicated a desire to backorder numbers if the entire quantity is not available</td>     </tr> </table> <p> The following POST payload elements are not common to all orders.  They are specific to one or more types of orders: <br> <table>     <tr>         <th>Parameter</th><th>Description</th>     </tr>     <tr>         <td>TelephoneNumberList</td><td>A list of telephone numbers to order</td>     </tr>     <tr>         <td>AreaCode</td><td>Allowed ranged: [2-9] for the first digit and [0, 9] for both the second and third digits.</td>     </tr>     <tr>         <td>RateCenter</td><td>A text Rate Center name.  Must be combined with State information</td>     </tr>     <tr>         <td>State</td><td>The two-letter abbreviation of the state</td>     </tr>     <tr>         <td>City</td><td>The name of the city that the Ordered telephone numbers should apply to</td>     </tr>     <tr>         <td>Zip</td><td>A five-digit (XXXXX) or nine-digit (XXXXX-XXXX) format value.</td>     </tr>     <tr>         <td>Lata</td><td>A maximum five-digit (XXXXX) numeric format.</td>     </tr>     <tr>         <td>EnableLCA</td><td>If set to true, local calling access numbers will be returned for Rate Center, NPA-NXX and NPANXXX orders if numbers are not available for the given criteria. Default is true.</td>     </tr>     <tr>         <td>Npa-Nxx or Npa-Nxxxx with EnableLCA</td><td>NpaNxx combination to be searched.<br>Valid Npa values:  [2-9] for the first digit, and [0-9] for both the second and third digits.<br>Valid Nxx values: [2-9] for the first digit, and [0-9] for both the second and third digits.<br>Valid Xxvalues [0-9].<br><br>if set to true, enables the ability to get local calling access numbers if numbers are not available for the given criteria.</td>     </tr>     <tr>         <td>LocalVanity</td><td>A text string used to request a regular vanity number. Valid range is between 4 and 7 alphanumeric characters.</td>     </tr>     <tr>         <td>EndsIn</td><td>Intended to use with LocalVanity only. The parameter value is true or false. If set to true, the search will look for only numbers which end in specified LocalVanity, otherwise LocalVanity sequence can be met anywhere in last 7 number digits. The default is false.</td>     </tr>     <tr>         <td>TollFreeVanity</td><td>A text string used to request a toll free vanity number. Valid range is between 4 and 7 alphanumeric characters.</td>     </tr>     <tr>         <td>TollFreeWildCardPattern</td><td>A 3-digit wild card pattern for specifying toll free prefixes, comprised of 8 followed by two stars, a digit and a star or two digits</td>     </tr>     <tr>         <td>ReservationIdList</td><td>If a telephone number or numbers have been previously reserved, the ReservationIdList provides the IDs necessary to release the numbers.  This only applies to reserved numbers - if no reservation has been placed on the numbers this list is not required.</td>     </tr>     <tr>         <td>TnAttributes</td>         <td>Attributes to be assigned to the telephone number. Optional parameter. Possible values: \"Protected\"</td>     </tr> </table> <br><br> <b>Putting it all together</b> <br><br> The request to order numbers is performed via a POST to the /orders resource.  As indicated above, the payload of this POST varies depending on the type of search that is to be performed for the numbers, with a unique payload element used to indicate each different order type. <br><br> The unique components of the payload are described in the table below.  These are combined with the common payload elements in the first table above to create a full order payload.  Some complete payloads are captured in the examples. <br><br> <table style=\"text-align: left; width: 100%;\" border=\"1\"  cellpadding=\"2\" cellspacing=\"0\">   <tbody>     <tr>       <th>Payload segment</th>       <th>Description</th>     </tr>     <tr>       <td>       <pre> &lt;ExistingTelephoneNumberOrderType&gt;     &lt;TelephoneNumberList&gt;         &lt;TelephoneNumber&gt;9193752369&lt;/TelephoneNumber&gt;         &lt;TelephoneNumber&gt;9193752720&lt;/TelephoneNumber&gt;         &lt;TelephoneNumber&gt;9193752648&lt;/TelephoneNumber&gt;     &lt;/TelephoneNumberList&gt;     &lt;ReservationIdList&gt;         &lt;ReservationId&gt;[GUID]&lt;/ReservationId&gt;         &lt;ReservationId&gt;[GUID]&lt;/ReservationId&gt;     &lt;/ReservationIdList&gt; &lt;/ExistingTelephoneNumberOrderType&gt;</pre>       </td>       <td>Order a set of numbers known to be available. <br>       This often results if the numbers have been<br>       found using a separate <b>availableNumbers</b> search<br>         If the numbers have previously been reserved, <br>         a reservation id must be included</td>     </tr>     <tr>       <td>       <pre> &lt;AreaCodeSearchAndOrderType&gt;     &lt;AreaCode&gt;617&lt;/AreaCode&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt; &lt;/AreaCodeSearchAndOrderType&gt;</pre>       </td>       <td>Allowed ranges ~ <br>       [2-9] for the first digit and <br>       [0, 9] for both the second and <br>       third digits.</td>     </tr>     <tr>       <td>       <pre> &lt;RateCenterSearchAndOrderType&gt;     &lt;RateCenter&gt;RALEIGH&lt;/RateCenter&gt;     &lt;State&gt;NC&lt;/State&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt; &lt;/RateCenterSearchAndOrderType&gt;</pre>       </td>       <td>Specify the Rate Center and <br> the State</td>     </tr>     <tr>       <td>       <pre> &lt;NPANXXSearchAndOrderType&gt;     &lt;NpaNxx&gt;919439&lt;/NpaNxx&gt;     &lt;EnableTNDetail&gt;true&lt;/EnableTNDetail&gt;     &lt;EnableLCA&gt;false&lt;/EnableLCA&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt; &lt;/NPANXXSearchAndOrderType&gt;</pre>       </td>       <td>Specify the NpaNxx combination to be ordered.<br>       Valid Npa values ~ [2-9] for the first digit,<br>       and [0-9] for both the second and third digits.<br>       Valid Nxx values ~ [2-9] for the first digit, <br>       and [0-9] for both the second and third digits.<br>       A similar approach is viable for NPANXXXX.<br>       The EnableLCA flag turns LCA search on or off.       </td>     </tr>     <tr>       <td>       <pre> &lt;TollFreeVanitySearchAndOrderType&gt;    &lt;Quantity&gt;1&lt;/Quantity&gt;        &lt;TollFreeVanity&gt;newcars&lt;/TollFreeVanity&gt; &lt;/TollFreeVanitySearchAndOrderType&gt;</pre>       </td>       <td>       Specify a Toll Free Vanity search, where the <br>       numbers ordered match a specific alphanumeric <br>       pattern between 4 and 7 characters long</td>     </tr>     <tr>       <td>       <pre> &lt;TollFreeWildCharSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;TollFreeWildCardPattern&gt;8**&lt;/TollFreeWildCardPattern&gt; &lt;/TollFreeWildCharSearchAndOrderType&gt;</pre>       </td>       <td>Specify the Toll Free wild card pattern.<br>       to be ordered, comprised of 3 digits beginning with '8'.<br>       Examples are 8**, 87*, etc.</td>     </tr>     <tr>       <td>       <pre> &lt;StateSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;State&gt;NC&lt;/State&gt; &lt;/StateSearchAndOrderType&gt;</pre>       </td>       <td>Specify the State to be searched<br>for telephone numbers</td>     </tr>     <tr>       <td>       <pre> &lt;CitySearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;City&gt;RALEIGH&lt;/City&gt;     &lt;State&gt;NC&lt;/State&gt; &lt;/CitySearchAndOrderType&gt;</pre>       </td>       <td>Specify the City and State to be ordered from.</td>     </tr>     <tr>       <td>       <pre> &lt;ZIPSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;Zip&gt;27606&lt;/Zip&gt; &lt;/ZIPSearchAndOrderType&gt;</pre>       </td>       <td>Specify the Zip Code to be ordered from.</td>     </tr>     <tr>       <td>       <pre> &lt;LATASearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;        &lt;Lata&gt;224&lt;/Lata&gt; &lt;/LATASearchAndOrderType&gt;</pre>       </td>       <td>Specify the LATA to order <br> telephone numbers from.</td>     </tr>     <tr>       <td>       <pre> &lt;CombinedSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;AreaCode&gt;617&lt;/AreaCode&gt;     &lt;RateCenter&gt;RALEIGH&lt;/RateCenter&gt;     &lt;State&gt;NC&lt;/State&gt;     &lt;NpaNxx&gt;919439&lt;/NpaNxx&gt;     &lt;NpaNxxX&gt;9194391&lt;/NpaNxxX&gt;     &lt;Lata&gt;224&lt;/Lata&gt;     &lt;City&gt;RALEIGH&lt;/City&gt;     &lt;Zip&gt;27606&lt;/Zip&gt;     &lt;EnableLCA&gt;false&lt;/EnableLCA&gt; &lt;/CombinedSearchAndOrderType&gt;</pre>       </td>       <td>Specify the any combination of:<br>       <ul><li>AreaCode</li><li>RateCenter</li><li>State</li><li>NpaNxx</li><li>NpaNxxX</li><li>Lata</li><li>City</li><li>Zip</li></ul>       <br> But with following limitations: <ul>     <li>Parameters AreaCode, NpaNxx and NpaNxxX<br>are mutually exclusive</li>     <li>LCA search is supported only for<br>one of the following criteria:<ul><ul><li>NpaNxx</li><li>NpaNxxX</li><li>RateCenter and State</li></ul></li>     <li>If City or RateCenter is specified<br>then State is required</li> </ul>       </td> <tr><td> <pre> &lt;CombinedSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;AreaCode&gt;617&lt;/AreaCode&gt;     &lt;LocalVanity&gt;newcars&lt;/LocalVanity&gt;     &lt;EndsIn&gt;false&lt;/EndsIn&gt; &lt;/CombinedSearchAndOrderType&gt; </pre> </td> <td>     Specify AreaCode and LocalVanity to order telephone numbers matching a specific alphanumeric pattern between 4 and 7 characters long.<br>     <br>     Limitations:     <ul>     <li>AreaCode is always required</li>     <li>No parameter combinations are allowed here</li>     <li>This order type is unsupported with BackOrderRequested=true</li>     </ul> </td> </tr> <tr> <td><pre>  &lt;TnAttributes&gt;     &lt;TnAttribute&gt;Protected&lt;/TnAttribute&gt;     &lt;/TnAttributes&gt;</pre>         </td>         <td>Specify TnAttribute to be assigned to the ordered telephone numbers.</td>       </tr>     </tr>   </tbody> </table> <br> <br> Some examples of POST payloads for some orders are below... 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_orders_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_orders_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_orders_post_with_http_info(self, account_id, **kwargs):
        """
        
        <span>A POST creates a request for Telephone Numbers</span> <br> A POST on the /orders resource is used to request that the system provide one or more TNs for use by the account.  The post creates a new number order record to preserve the request, as well as the response of the Bandwidth Dashboard to the request.  A well-formed POST on the /orders resource will create an order record, and return an order-id string that can be used to uniquely identify the new number order request.  The details of success and failure of the request for TNs will be preserved and linked to the returned order id.<br><br> The order-id is returned in the Location Header, allowing the API user immediate access to the order.<br><br> There are multiple ways that new telephone numbers can be requested.  The various request payloads are documented below. <br><br> Common values in <b>all</b> request payloads include: <br> <table>     <tr>         <th>Parameter</th>         <th>Description</th>     </tr>     <tr>         <td>Quantity</td>         <td>The desired quantity of requested numbers. values range from 1-5000. If no quantity is specified, the default of 5000 is returned.</td>     </tr>     <tr>         <td>name</td>         <td>The name of the order. Max length restricted to 50 characters.</td>     </tr>     <tr>         <td>CustomerOrderId</td>         <td>Optional value for Id set by customer</td>     </tr>     <tr>         <td>SiteId</td>         <td>The ID of the Site that the SIP Peer is to be associated with.</td>     </tr>     <tr>         <td>PeerId</td><td>The ID of the SIP Peer that the telephone numbers are to be assigned to.</td>     </tr>     <tr>         <td>PartialAllowed</td>         <td>By default all order submissions are fulfilled partially. Setting the PartialAllowed to false would trigger the entire order to be fulfilled (any error ecnountered such as 1 TN not being available would fail all TNs in the order)<br>             By default, this value is set to false</td>     </tr>     <tr>         <td>BackOrderRequested</td>         <td>BackOrderRequested will indicate to the system that if the entire quantity of numbers is not available on the first attempt to fill the new number order, the request will be repeated periodically until the request is successful or cancelled. Setting the parameter to true indeicated a desire to backorder numbers if the entire quantity is not available</td>     </tr> </table> <p> The following POST payload elements are not common to all orders.  They are specific to one or more types of orders: <br> <table>     <tr>         <th>Parameter</th><th>Description</th>     </tr>     <tr>         <td>TelephoneNumberList</td><td>A list of telephone numbers to order</td>     </tr>     <tr>         <td>AreaCode</td><td>Allowed ranged: [2-9] for the first digit and [0, 9] for both the second and third digits.</td>     </tr>     <tr>         <td>RateCenter</td><td>A text Rate Center name.  Must be combined with State information</td>     </tr>     <tr>         <td>State</td><td>The two-letter abbreviation of the state</td>     </tr>     <tr>         <td>City</td><td>The name of the city that the Ordered telephone numbers should apply to</td>     </tr>     <tr>         <td>Zip</td><td>A five-digit (XXXXX) or nine-digit (XXXXX-XXXX) format value.</td>     </tr>     <tr>         <td>Lata</td><td>A maximum five-digit (XXXXX) numeric format.</td>     </tr>     <tr>         <td>EnableLCA</td><td>If set to true, local calling access numbers will be returned for Rate Center, NPA-NXX and NPANXXX orders if numbers are not available for the given criteria. Default is true.</td>     </tr>     <tr>         <td>Npa-Nxx or Npa-Nxxxx with EnableLCA</td><td>NpaNxx combination to be searched.<br>Valid Npa values:  [2-9] for the first digit, and [0-9] for both the second and third digits.<br>Valid Nxx values: [2-9] for the first digit, and [0-9] for both the second and third digits.<br>Valid Xxvalues [0-9].<br><br>if set to true, enables the ability to get local calling access numbers if numbers are not available for the given criteria.</td>     </tr>     <tr>         <td>LocalVanity</td><td>A text string used to request a regular vanity number. Valid range is between 4 and 7 alphanumeric characters.</td>     </tr>     <tr>         <td>EndsIn</td><td>Intended to use with LocalVanity only. The parameter value is true or false. If set to true, the search will look for only numbers which end in specified LocalVanity, otherwise LocalVanity sequence can be met anywhere in last 7 number digits. The default is false.</td>     </tr>     <tr>         <td>TollFreeVanity</td><td>A text string used to request a toll free vanity number. Valid range is between 4 and 7 alphanumeric characters.</td>     </tr>     <tr>         <td>TollFreeWildCardPattern</td><td>A 3-digit wild card pattern for specifying toll free prefixes, comprised of 8 followed by two stars, a digit and a star or two digits</td>     </tr>     <tr>         <td>ReservationIdList</td><td>If a telephone number or numbers have been previously reserved, the ReservationIdList provides the IDs necessary to release the numbers.  This only applies to reserved numbers - if no reservation has been placed on the numbers this list is not required.</td>     </tr>     <tr>         <td>TnAttributes</td>         <td>Attributes to be assigned to the telephone number. Optional parameter. Possible values: \"Protected\"</td>     </tr> </table> <br><br> <b>Putting it all together</b> <br><br> The request to order numbers is performed via a POST to the /orders resource.  As indicated above, the payload of this POST varies depending on the type of search that is to be performed for the numbers, with a unique payload element used to indicate each different order type. <br><br> The unique components of the payload are described in the table below.  These are combined with the common payload elements in the first table above to create a full order payload.  Some complete payloads are captured in the examples. <br><br> <table style=\"text-align: left; width: 100%;\" border=\"1\"  cellpadding=\"2\" cellspacing=\"0\">   <tbody>     <tr>       <th>Payload segment</th>       <th>Description</th>     </tr>     <tr>       <td>       <pre> &lt;ExistingTelephoneNumberOrderType&gt;     &lt;TelephoneNumberList&gt;         &lt;TelephoneNumber&gt;9193752369&lt;/TelephoneNumber&gt;         &lt;TelephoneNumber&gt;9193752720&lt;/TelephoneNumber&gt;         &lt;TelephoneNumber&gt;9193752648&lt;/TelephoneNumber&gt;     &lt;/TelephoneNumberList&gt;     &lt;ReservationIdList&gt;         &lt;ReservationId&gt;[GUID]&lt;/ReservationId&gt;         &lt;ReservationId&gt;[GUID]&lt;/ReservationId&gt;     &lt;/ReservationIdList&gt; &lt;/ExistingTelephoneNumberOrderType&gt;</pre>       </td>       <td>Order a set of numbers known to be available. <br>       This often results if the numbers have been<br>       found using a separate <b>availableNumbers</b> search<br>         If the numbers have previously been reserved, <br>         a reservation id must be included</td>     </tr>     <tr>       <td>       <pre> &lt;AreaCodeSearchAndOrderType&gt;     &lt;AreaCode&gt;617&lt;/AreaCode&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt; &lt;/AreaCodeSearchAndOrderType&gt;</pre>       </td>       <td>Allowed ranges ~ <br>       [2-9] for the first digit and <br>       [0, 9] for both the second and <br>       third digits.</td>     </tr>     <tr>       <td>       <pre> &lt;RateCenterSearchAndOrderType&gt;     &lt;RateCenter&gt;RALEIGH&lt;/RateCenter&gt;     &lt;State&gt;NC&lt;/State&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt; &lt;/RateCenterSearchAndOrderType&gt;</pre>       </td>       <td>Specify the Rate Center and <br> the State</td>     </tr>     <tr>       <td>       <pre> &lt;NPANXXSearchAndOrderType&gt;     &lt;NpaNxx&gt;919439&lt;/NpaNxx&gt;     &lt;EnableTNDetail&gt;true&lt;/EnableTNDetail&gt;     &lt;EnableLCA&gt;false&lt;/EnableLCA&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt; &lt;/NPANXXSearchAndOrderType&gt;</pre>       </td>       <td>Specify the NpaNxx combination to be ordered.<br>       Valid Npa values ~ [2-9] for the first digit,<br>       and [0-9] for both the second and third digits.<br>       Valid Nxx values ~ [2-9] for the first digit, <br>       and [0-9] for both the second and third digits.<br>       A similar approach is viable for NPANXXXX.<br>       The EnableLCA flag turns LCA search on or off.       </td>     </tr>     <tr>       <td>       <pre> &lt;TollFreeVanitySearchAndOrderType&gt;    &lt;Quantity&gt;1&lt;/Quantity&gt;        &lt;TollFreeVanity&gt;newcars&lt;/TollFreeVanity&gt; &lt;/TollFreeVanitySearchAndOrderType&gt;</pre>       </td>       <td>       Specify a Toll Free Vanity search, where the <br>       numbers ordered match a specific alphanumeric <br>       pattern between 4 and 7 characters long</td>     </tr>     <tr>       <td>       <pre> &lt;TollFreeWildCharSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;TollFreeWildCardPattern&gt;8**&lt;/TollFreeWildCardPattern&gt; &lt;/TollFreeWildCharSearchAndOrderType&gt;</pre>       </td>       <td>Specify the Toll Free wild card pattern.<br>       to be ordered, comprised of 3 digits beginning with '8'.<br>       Examples are 8**, 87*, etc.</td>     </tr>     <tr>       <td>       <pre> &lt;StateSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;State&gt;NC&lt;/State&gt; &lt;/StateSearchAndOrderType&gt;</pre>       </td>       <td>Specify the State to be searched<br>for telephone numbers</td>     </tr>     <tr>       <td>       <pre> &lt;CitySearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;City&gt;RALEIGH&lt;/City&gt;     &lt;State&gt;NC&lt;/State&gt; &lt;/CitySearchAndOrderType&gt;</pre>       </td>       <td>Specify the City and State to be ordered from.</td>     </tr>     <tr>       <td>       <pre> &lt;ZIPSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;Zip&gt;27606&lt;/Zip&gt; &lt;/ZIPSearchAndOrderType&gt;</pre>       </td>       <td>Specify the Zip Code to be ordered from.</td>     </tr>     <tr>       <td>       <pre> &lt;LATASearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;        &lt;Lata&gt;224&lt;/Lata&gt; &lt;/LATASearchAndOrderType&gt;</pre>       </td>       <td>Specify the LATA to order <br> telephone numbers from.</td>     </tr>     <tr>       <td>       <pre> &lt;CombinedSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;AreaCode&gt;617&lt;/AreaCode&gt;     &lt;RateCenter&gt;RALEIGH&lt;/RateCenter&gt;     &lt;State&gt;NC&lt;/State&gt;     &lt;NpaNxx&gt;919439&lt;/NpaNxx&gt;     &lt;NpaNxxX&gt;9194391&lt;/NpaNxxX&gt;     &lt;Lata&gt;224&lt;/Lata&gt;     &lt;City&gt;RALEIGH&lt;/City&gt;     &lt;Zip&gt;27606&lt;/Zip&gt;     &lt;EnableLCA&gt;false&lt;/EnableLCA&gt; &lt;/CombinedSearchAndOrderType&gt;</pre>       </td>       <td>Specify the any combination of:<br>       <ul><li>AreaCode</li><li>RateCenter</li><li>State</li><li>NpaNxx</li><li>NpaNxxX</li><li>Lata</li><li>City</li><li>Zip</li></ul>       <br> But with following limitations: <ul>     <li>Parameters AreaCode, NpaNxx and NpaNxxX<br>are mutually exclusive</li>     <li>LCA search is supported only for<br>one of the following criteria:<ul><ul><li>NpaNxx</li><li>NpaNxxX</li><li>RateCenter and State</li></ul></li>     <li>If City or RateCenter is specified<br>then State is required</li> </ul>       </td> <tr><td> <pre> &lt;CombinedSearchAndOrderType&gt;     &lt;Quantity&gt;1&lt;/Quantity&gt;     &lt;AreaCode&gt;617&lt;/AreaCode&gt;     &lt;LocalVanity&gt;newcars&lt;/LocalVanity&gt;     &lt;EndsIn&gt;false&lt;/EndsIn&gt; &lt;/CombinedSearchAndOrderType&gt; </pre> </td> <td>     Specify AreaCode and LocalVanity to order telephone numbers matching a specific alphanumeric pattern between 4 and 7 characters long.<br>     <br>     Limitations:     <ul>     <li>AreaCode is always required</li>     <li>No parameter combinations are allowed here</li>     <li>This order type is unsupported with BackOrderRequested=true</li>     </ul> </td> </tr> <tr> <td><pre>  &lt;TnAttributes&gt;     &lt;TnAttribute&gt;Protected&lt;/TnAttribute&gt;     &lt;/TnAttributes&gt;</pre>         </td>         <td>Specify TnAttribute to be assigned to the ordered telephone numbers.</td>       </tr>     </tr>   </tbody> </table> <br> <br> Some examples of POST payloads for some orders are below... 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_orders_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_orders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_orders_post`")

        resource_path = '/accounts/{accountId}/orders'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_get(self, account_id, page, size, **kwargs):
        """
        
        Retrieves the port-in requests for the given account ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_get(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: The port-in ID of the first order of the page. \"1\" is used as a convention for the first port-in in the account ID. (required)
        :param int size: The number of port-ins retrieved. (required)
        :param str status: Displays the port-ins with the given status.
        :param date date: The date of when the order was placed.
        :param date startdate: The earliest date that the order was last modified. <strong>NOTE: </strong> startdate and enddate must be simultaneously declared. 
        :param date enddate: The latest date that the order was last modified. <strong>NOTE: </strong> startdate and enddate must be simultaneously declared. 
        :param int tn: The billing telephone number associated with the port-ins
        :param str pon: The port order number
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_get_with_http_info(account_id, page, size, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_get_with_http_info(account_id, page, size, **kwargs)
            return data

    def accounts_account_id_portins_get_with_http_info(self, account_id, page, size, **kwargs):
        """
        
        Retrieves the port-in requests for the given account ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_get_with_http_info(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: The port-in ID of the first order of the page. \"1\" is used as a convention for the first port-in in the account ID. (required)
        :param int size: The number of port-ins retrieved. (required)
        :param str status: Displays the port-ins with the given status.
        :param date date: The date of when the order was placed.
        :param date startdate: The earliest date that the order was last modified. <strong>NOTE: </strong> startdate and enddate must be simultaneously declared. 
        :param date enddate: The latest date that the order was last modified. <strong>NOTE: </strong> startdate and enddate must be simultaneously declared. 
        :param int tn: The billing telephone number associated with the port-ins
        :param str pon: The port order number
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page', 'size', 'status', 'date', 'startdate', 'enddate', 'tn', 'pon']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_get`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `accounts_account_id_portins_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `accounts_account_id_portins_get`")

        resource_path = '/accounts/{accountId}/portins'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']
        if 'tn' in params:
            query_params['tn'] = params['tn']
        if 'pon' in params:
            query_params['pon'] = params['pon']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_activation_status_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the currently activated status for customer activated (triggered) portin orders. The payload returns the list of activated TNs associated with the order. It also returns a list of the TNs associated with the order that have not yet been activated <br><br> At this time all phone numbers associated with a PON will be activated at the same time, but a change to per-TN activation is coming and will use the same basic payload and activation model. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_activation_status_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_activation_status_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_activation_status_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_activation_status_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the currently activated status for customer activated (triggered) portin orders. The payload returns the list of activated TNs associated with the order. It also returns a list of the TNs associated with the order that have not yet been activated <br><br> At this time all phone numbers associated with a PON will be activated at the same time, but a change to per-TN activation is coming and will use the same basic payload and activation model. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_activation_status_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_activation_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_activation_status_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_activation_status_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/activationStatus'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_activation_status_put(self, account_id, orderid, **kwargs):
        """
        
        Sets the activation time for the portin order.  <br> <br> This API call is currently used to set the Activation time of the customer activated (triggered) port. <ul> <li>If the time is in the past all of the TNs in the portin request will be activated 'immediately'.</li> <li>If the time is within the three days after the approved FoC date, the auto-activation time for the port will be set to that time</li> </ul> Activation of individual telephone numbers will be enabled in a future release, but are not currently modifiable via this API 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_activation_status_put(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_activation_status_put_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_activation_status_put_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_activation_status_put_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Sets the activation time for the portin order.  <br> <br> This API call is currently used to set the Activation time of the customer activated (triggered) port. <ul> <li>If the time is in the past all of the TNs in the portin request will be activated 'immediately'.</li> <li>If the time is within the three days after the approved FoC date, the auto-activation time for the port will be set to that time</li> </ul> Activation of individual telephone numbers will be enabled in a future release, but are not currently modifiable via this API 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_activation_status_put_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_activation_status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_activation_status_put`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_activation_status_put`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/activationStatus'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_area_codes_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves a list of area codes associated with the specified port-in number and displays them in the payload.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_area_codes_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_area_codes_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_area_codes_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_area_codes_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves a list of area codes associated with the specified port-in number and displays them in the payload.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_area_codes_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_area_codes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_area_codes_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_area_codes_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/areaCodes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_delete(self, account_id, orderid, **kwargs):
        """
        
        Cancels the port-in order. This does not remove the order from the system.  It simply places the existing order in a canceled state. Note that only a pending port-in order can be canceled; if the order was previously canceled or completed, then a DELETE will not be possible.  

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_delete(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_delete_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_delete_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_delete_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Cancels the port-in order. This does not remove the order from the system.  It simply places the existing order in a canceled state. Note that only a pending port-in order can be canceled; if the order was previously canceled or completed, then a DELETE will not be possible.  

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_delete_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_delete`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_delete`")

        resource_path = '/accounts/{accountId}/portins/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the information associated with the specified port-in ID number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the information associated with the specified port-in ID number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_history_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the history of the specified port-in order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_history_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_history_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the history of the specified port-in order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_history_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_history_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_history_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/history'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_loas_fileid_delete(self, account_id, orderid, fileid, **kwargs):
        """
        
        Retrieves the list of the loa (and other) files associated with the portin order

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_delete(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_loas_fileid_delete_with_http_info(account_id, orderid, fileid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_loas_fileid_delete_with_http_info(account_id, orderid, fileid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_loas_fileid_delete_with_http_info(self, account_id, orderid, fileid, **kwargs):
        """
        
        Retrieves the list of the loa (and other) files associated with the portin order

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_delete_with_http_info(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid', 'fileid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_loas_fileid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_loas_fileid_delete`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_loas_fileid_delete`")
        # verify the required parameter 'fileid' is set
        if ('fileid' not in params) or (params['fileid'] is None):
            raise ValueError("Missing the required parameter `fileid` when calling `accounts_account_id_portins_orderid_loas_fileid_delete`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/loas/{fileid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']
        if 'fileid' in params:
            path_params['fileid'] = params['fileid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_loas_fileid_get(self, account_id, orderid, fileid, **kwargs):
        """
        
        Retrieves the list of the loa (and other) files associated with the portin order

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_get(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_loas_fileid_get_with_http_info(account_id, orderid, fileid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_loas_fileid_get_with_http_info(account_id, orderid, fileid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_loas_fileid_get_with_http_info(self, account_id, orderid, fileid, **kwargs):
        """
        
        Retrieves the list of the loa (and other) files associated with the portin order

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_get_with_http_info(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid', 'fileid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_loas_fileid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_loas_fileid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_loas_fileid_get`")
        # verify the required parameter 'fileid' is set
        if ('fileid' not in params) or (params['fileid'] is None):
            raise ValueError("Missing the required parameter `fileid` when calling `accounts_account_id_portins_orderid_loas_fileid_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/loas/{fileid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']
        if 'fileid' in params:
            path_params['fileid'] = params['fileid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_loas_fileid_metadata_delete(self, account_id, orderid, fileid, **kwargs):
        """
        
        Deletes the metadata previously associated with the identified file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_metadata_delete(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_loas_fileid_metadata_delete_with_http_info(account_id, orderid, fileid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_loas_fileid_metadata_delete_with_http_info(account_id, orderid, fileid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_loas_fileid_metadata_delete_with_http_info(self, account_id, orderid, fileid, **kwargs):
        """
        
        Deletes the metadata previously associated with the identified file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_metadata_delete_with_http_info(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid', 'fileid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_loas_fileid_metadata_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_delete`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_delete`")
        # verify the required parameter 'fileid' is set
        if ('fileid' not in params) or (params['fileid'] is None):
            raise ValueError("Missing the required parameter `fileid` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_delete`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/loas/{fileid}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']
        if 'fileid' in params:
            path_params['fileid'] = params['fileid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_loas_fileid_metadata_get(self, account_id, orderid, fileid, **kwargs):
        """
        
        Retrieves the metadata associated with the file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_metadata_get(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_loas_fileid_metadata_get_with_http_info(account_id, orderid, fileid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_loas_fileid_metadata_get_with_http_info(account_id, orderid, fileid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_loas_fileid_metadata_get_with_http_info(self, account_id, orderid, fileid, **kwargs):
        """
        
        Retrieves the metadata associated with the file.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_metadata_get_with_http_info(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid', 'fileid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_loas_fileid_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_get`")
        # verify the required parameter 'fileid' is set
        if ('fileid' not in params) or (params['fileid'] is None):
            raise ValueError("Missing the required parameter `fileid` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/loas/{fileid}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']
        if 'fileid' in params:
            path_params['fileid'] = params['fileid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_loas_fileid_metadata_put(self, account_id, orderid, fileid, **kwargs):
        """
        
        Associate metadata with the file named in the resource path.  This will describe the file, and declare the data that is contained in the file, selected from a list of [LOA | INVOICE | CSR | OTHER]. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_metadata_put(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_loas_fileid_metadata_put_with_http_info(account_id, orderid, fileid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_loas_fileid_metadata_put_with_http_info(account_id, orderid, fileid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_loas_fileid_metadata_put_with_http_info(self, account_id, orderid, fileid, **kwargs):
        """
        
        Associate metadata with the file named in the resource path.  This will describe the file, and declare the data that is contained in the file, selected from a list of [LOA | INVOICE | CSR | OTHER]. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_metadata_put_with_http_info(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid', 'fileid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_loas_fileid_metadata_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_put`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_put`")
        # verify the required parameter 'fileid' is set
        if ('fileid' not in params) or (params['fileid'] is None):
            raise ValueError("Missing the required parameter `fileid` when calling `accounts_account_id_portins_orderid_loas_fileid_metadata_put`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/loas/{fileid}/metadata'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']
        if 'fileid' in params:
            path_params['fileid'] = params['fileid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_loas_fileid_put(self, account_id, orderid, fileid, **kwargs):
        """
        
        A PUT on the filename will update / replace the identified file id.  The format of the PUT is identical to that of the POST.<br> Header settings typical of a valid upload are...<br> <code> Host: api.inetwork.com <br> Authorization: Basic xxxxxxxxxxxxxxxxxxxx== <br> Content-Type: application/pdf <br> Accept: */* <br> Accept-Encoding: gzip, deflate <br> Accept-Language: en-US,en;q=0.8 <br> Cache-Control: no-cache <br>     <br> ----WebKitFormBoundaryE19zNvXGzXaLvS5C <br> Content-Disposition: form-data; name=\"george\"; filename=\"Bandwidth Dashboard.pdf\" <br> Content-Type: application/pdf <br>     <br>     <br> ----WebKitFormBoundaryE19zNvXGzXaLvS5C <br> </code> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_put(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_loas_fileid_put_with_http_info(account_id, orderid, fileid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_loas_fileid_put_with_http_info(account_id, orderid, fileid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_loas_fileid_put_with_http_info(self, account_id, orderid, fileid, **kwargs):
        """
        
        A PUT on the filename will update / replace the identified file id.  The format of the PUT is identical to that of the POST.<br> Header settings typical of a valid upload are...<br> <code> Host: api.inetwork.com <br> Authorization: Basic xxxxxxxxxxxxxxxxxxxx== <br> Content-Type: application/pdf <br> Accept: */* <br> Accept-Encoding: gzip, deflate <br> Accept-Language: en-US,en;q=0.8 <br> Cache-Control: no-cache <br>     <br> ----WebKitFormBoundaryE19zNvXGzXaLvS5C <br> Content-Disposition: form-data; name=\"george\"; filename=\"Bandwidth Dashboard.pdf\" <br> Content-Type: application/pdf <br>     <br>     <br> ----WebKitFormBoundaryE19zNvXGzXaLvS5C <br> </code> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_fileid_put_with_http_info(account_id, orderid, fileid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param str fileid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid', 'fileid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_loas_fileid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_loas_fileid_put`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_loas_fileid_put`")
        # verify the required parameter 'fileid' is set
        if ('fileid' not in params) or (params['fileid'] is None):
            raise ValueError("Missing the required parameter `fileid` when calling `accounts_account_id_portins_orderid_loas_fileid_put`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/loas/{fileid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']
        if 'fileid' in params:
            path_params['fileid'] = params['fileid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_loas_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the list of the loa (and other) files associated with the portin order

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param bool metadata: if true it will return meta-data assoociated with the file used to describe the file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_loas_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_loas_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_loas_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the list of the loa (and other) files associated with the portin order

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :param bool metadata: if true it will return meta-data assoociated with the file used to describe the file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid', 'metadata']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_loas_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_loas_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_loas_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/loas'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}
        if 'metadata' in params:
            query_params['metadata'] = params['metadata']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_loas_post(self, account_id, orderid, **kwargs):
        """
        
        POSTing to the /loas resource will enable the upload of the file.  The key attribute to the POST is ensuring that the headers are correctly set to support the file upload.<br>     <br> Header settings typical of a valid upload are...<br>     <br> <code> Host: api.inetwork.com <br> Authorization: Basic xxxxxxxxxxxxxxxxxxxx== <br> Content-Type: application/pdf <br> Accept: */* <br> Accept-Encoding: gzip, deflate <br> Accept-Language: en-US,en;q=0.8 <br> Cache-Control: no-cache <br>     <br> ----WebKitFormBoundaryE19zNvXGzXaLvS5C <br> Content-Disposition: form-data; name=\"george\"; filename=\"Bandwidth Dashboard.pdf\" <br> Content-Type: application/pdf <br>     <br>     <br> ----WebKitFormBoundaryE19zNvXGzXaLvS5C <br> </code> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_post(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_loas_post_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_loas_post_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_loas_post_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        POSTing to the /loas resource will enable the upload of the file.  The key attribute to the POST is ensuring that the headers are correctly set to support the file upload.<br>     <br> Header settings typical of a valid upload are...<br>     <br> <code> Host: api.inetwork.com <br> Authorization: Basic xxxxxxxxxxxxxxxxxxxx== <br> Content-Type: application/pdf <br> Accept: */* <br> Accept-Encoding: gzip, deflate <br> Accept-Language: en-US,en;q=0.8 <br> Cache-Control: no-cache <br>     <br> ----WebKitFormBoundaryE19zNvXGzXaLvS5C <br> Content-Disposition: form-data; name=\"george\"; filename=\"Bandwidth Dashboard.pdf\" <br> Content-Type: application/pdf <br>     <br>     <br> ----WebKitFormBoundaryE19zNvXGzXaLvS5C <br> </code> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_loas_post_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_loas_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_loas_post`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_loas_post`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/loas'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_notes_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the set of notes associated with an order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_notes_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_notes_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_notes_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_notes_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the set of notes associated with an order.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_notes_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_notes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_notes_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_notes_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_notes_post(self, account_id, orderid, **kwargs):
        """
        
        Updates the Notes resource by adding a note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_notes_post(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_notes_post_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_notes_post_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_notes_post_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Updates the Notes resource by adding a note.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_notes_post_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_notes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_notes_post`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_notes_post`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/notes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_npa_nxx_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves a list of Npa-Nxx associated with the specified port-in number and displays them in the payload.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_npa_nxx_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_npa_nxx_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_npa_nxx_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_npa_nxx_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves a list of Npa-Nxx associated with the specified port-in number and displays them in the payload.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_npa_nxx_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_npa_nxx_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_npa_nxx_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_npa_nxx_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/npaNxx'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_put(self, account_id, orderid, **kwargs):
        """
        
        It is possible to change (\"SUPP\" in LNP terms) an existing LNP order.  This is done via a PUT on the existing order-id. Since many of the entries in an LNP Order cannot be changed after the initial order is placed (the list to TNs for example) the PUT on a porting order-id does *not* require that the full order payload is included.<br/> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_put(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_put_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_put_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_put_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        It is possible to change (\"SUPP\" in LNP terms) an existing LNP order.  This is done via a PUT on the existing order-id. Since many of the entries in an LNP Order cannot be changed after the initial order is placed (the list to TNs for example) the PUT on a porting order-id does *not* require that the full order payload is included.<br/> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_put_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_put`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_put`")

        resource_path = '/accounts/{accountId}/portins/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_tns_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves a list of telephone numbers associated with the specified port-in number and displays them in the payload.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_tns_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_tns_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_tns_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_tns_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves a list of telephone numbers associated with the specified port-in number and displays them in the payload.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_tns_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_tns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_tns_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_tns_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/tns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_orderid_totals_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves a total count of telephone numbers associated with the specified port-in number and displays them in the payload.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_totals_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_orderid_totals_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_orderid_totals_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portins_orderid_totals_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves a total count of telephone numbers associated with the specified port-in number and displays them in the payload.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_orderid_totals_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_orderid_totals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_orderid_totals_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portins_orderid_totals_get`")

        resource_path = '/accounts/{accountId}/portins/{orderid}/totals'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_post(self, account_id, **kwargs):
        """
        
        Creates a port-in request under the given site ID and sippeer ID as specified in the body.<br> Upon a successfully-submitted payload, the order will have a status of \"PENDING_DOCUMENTS\".<br> In order to have a successful POST, the payload will need to have a specific <strong>site ID</strong> and <strong>sippeer ID</strong>, according to the account. <br><br> <strong>TnAttributes</strong> - attributes to be assigned to the telephone number. Optional parameter. Possible values: \"Protected\" 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_portins_post_with_http_info(self, account_id, **kwargs):
        """
        
        Creates a port-in request under the given site ID and sippeer ID as specified in the body.<br> Upon a successfully-submitted payload, the order will have a status of \"PENDING_DOCUMENTS\".<br> In order to have a successful POST, the payload will need to have a specific <strong>site ID</strong> and <strong>sippeer ID</strong>, according to the account. <br><br> <strong>TnAttributes</strong> - attributes to be assigned to the telephone number. Optional parameter. Possible values: \"Protected\" 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_post`")

        resource_path = '/accounts/{accountId}/portins'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portins_totals_get(self, account_id, **kwargs):
        """
        
        Retrieves the total count of port-ins.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_totals_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str status: The current status of the port-in.
        :param str vendor_id: The vendor ID of the port-in.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portins_totals_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_portins_totals_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_portins_totals_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieves the total count of port-ins.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portins_totals_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str status: The current status of the port-in.
        :param str vendor_id: The vendor ID of the port-in.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'status', 'vendor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portins_totals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portins_totals_get`")

        resource_path = '/accounts/{accountId}/portins/totals'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'status' in params:
            query_params['status'] = params['status']
        if 'vendor_id' in params:
            query_params['vendorId'] = params['vendor_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portouts_get(self, account_id, page, size, **kwargs):
        """
        
        Retrieves a list of port-out requests for the given account ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portouts_get(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: The port-out ID of the first order of the page. \"1\" is used as a convention for the first port-out in the account ID. (required)
        :param int size: The number of port-outs retrieved. (required)
        :param str status: Displays the port-outs with the given status.
        :param date date: The date of when the order was placed.
        :param date startdate: The earliest date that the order was last modified. <strong>NOTE: </strong> startdate and enddate must be simultaneously declared. 
        :param date enddate: The latest date that the order was last modified. <strong>NOTE: </strong> startdate and enddate must be simultaneously declared. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portouts_get_with_http_info(account_id, page, size, **kwargs)
        else:
            (data) = self.accounts_account_id_portouts_get_with_http_info(account_id, page, size, **kwargs)
            return data

    def accounts_account_id_portouts_get_with_http_info(self, account_id, page, size, **kwargs):
        """
        
        Retrieves a list of port-out requests for the given account ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portouts_get_with_http_info(account_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: The port-out ID of the first order of the page. \"1\" is used as a convention for the first port-out in the account ID. (required)
        :param int size: The number of port-outs retrieved. (required)
        :param str status: Displays the port-outs with the given status.
        :param date date: The date of when the order was placed.
        :param date startdate: The earliest date that the order was last modified. <strong>NOTE: </strong> startdate and enddate must be simultaneously declared. 
        :param date enddate: The latest date that the order was last modified. <strong>NOTE: </strong> startdate and enddate must be simultaneously declared. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page', 'size', 'status', 'date', 'startdate', 'enddate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portouts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portouts_get`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `accounts_account_id_portouts_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `accounts_account_id_portouts_get`")

        resource_path = '/accounts/{accountId}/portouts'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_portouts_orderid_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the information associated with the specified port-out ID number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portouts_orderid_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_portouts_orderid_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_portouts_orderid_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_portouts_orderid_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieves the information associated with the specified port-out ID number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_portouts_orderid_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_portouts_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_portouts_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_portouts_orderid_get`")

        resource_path = '/accounts/{accountId}/portouts/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_products_get(self, account_id, **kwargs):
        """
        
        discover what is currently enabled on the account

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_products_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_products_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_products_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_products_get_with_http_info(self, account_id, **kwargs):
        """
        
        discover what is currently enabled on the account

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_products_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_products_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_products_get`")

        resource_path = '/accounts/{accountId}/products'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_reports_get(self, account_id, **kwargs):
        """
        
        GET Retrieves a list of the report templates available for use within the Iris application.  This list contains the basic description of the reports, including a report ID that can be used to access further details about the report, and thus facilitating the subsequent choice and creation of an instance of the report. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_reports_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_reports_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_reports_get_with_http_info(self, account_id, **kwargs):
        """
        
        GET Retrieves a list of the report templates available for use within the Iris application.  This list contains the basic description of the reports, including a report ID that can be used to access further details about the report, and thus facilitating the subsequent choice and creation of an instance of the report. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_reports_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_reports_get`")

        resource_path = '/accounts/{accountId}/reports'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_reports_instances_get(self, account_id, **kwargs):
        """
        
        Retrieve report instances within the account scope, regardless of the report of which the instance is an instance of, including the up-to-date report generation status.  This is a convenience API call to make it easier to examine all Instances in scope. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_instances_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_reports_instances_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_reports_instances_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_reports_instances_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieve report instances within the account scope, regardless of the report of which the instance is an instance of, including the up-to-date report generation status.  This is a convenience API call to make it easier to examine all Instances in scope. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_instances_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_reports_instances_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_reports_instances_get`")

        resource_path = '/accounts/{accountId}/reports/instances'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_reports_reportid_get(self, account_id, reportid, **kwargs):
        """
        
        A GET issued on a specific report (as identified by it's ID) will return all of the details of that report, allowing the API user to create an instance of that report.  Those details include:     <ul>         <li>The report name</li>         <li>a description of the report in general terms</li>         <li>a set of parameters that are used to provide boundaries on the information that is provided. &nbsp;These parameters contain</li>         <ul>             <li>The parameter name,</li>             <li>a&nbsp;description of the parameter,</li>             <li>a declaration of whether it is required or not, </li>             <li>is multiple vales allowed or not, </li>             <li>the type of the parameter, which can be one of</li>                 <ul>                     <li>Account ID (autofilled)</li>                     <li>Site ID</li>                     <li>SipPeer ID</li>                     <li>String</li>                     <li>Integer</li>                     <li>Boolean</li>                     <li>Enum, with a list of possible values.</li>                 </ul>             </ul>         </ul>     </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_get(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_reports_reportid_get_with_http_info(account_id, reportid, **kwargs)
        else:
            (data) = self.accounts_account_id_reports_reportid_get_with_http_info(account_id, reportid, **kwargs)
            return data

    def accounts_account_id_reports_reportid_get_with_http_info(self, account_id, reportid, **kwargs):
        """
        
        A GET issued on a specific report (as identified by it's ID) will return all of the details of that report, allowing the API user to create an instance of that report.  Those details include:     <ul>         <li>The report name</li>         <li>a description of the report in general terms</li>         <li>a set of parameters that are used to provide boundaries on the information that is provided. &nbsp;These parameters contain</li>         <ul>             <li>The parameter name,</li>             <li>a&nbsp;description of the parameter,</li>             <li>a declaration of whether it is required or not, </li>             <li>is multiple vales allowed or not, </li>             <li>the type of the parameter, which can be one of</li>                 <ul>                     <li>Account ID (autofilled)</li>                     <li>Site ID</li>                     <li>SipPeer ID</li>                     <li>String</li>                     <li>Integer</li>                     <li>Boolean</li>                     <li>Enum, with a list of possible values.</li>                 </ul>             </ul>         </ul>     </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_get_with_http_info(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reportid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_reports_reportid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_reports_reportid_get`")
        # verify the required parameter 'reportid' is set
        if ('reportid' not in params) or (params['reportid'] is None):
            raise ValueError("Missing the required parameter `reportid` when calling `accounts_account_id_reports_reportid_get`")

        resource_path = '/accounts/{accountId}/reports/{reportid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reportid' in params:
            path_params['reportid'] = params['reportid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_reports_reportid_instances_get(self, account_id, reportid, **kwargs):
        """
        
        Retrieve report instances associated with a specific report, including the up-to-date report generation status. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_instances_get(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_reports_reportid_instances_get_with_http_info(account_id, reportid, **kwargs)
        else:
            (data) = self.accounts_account_id_reports_reportid_instances_get_with_http_info(account_id, reportid, **kwargs)
            return data

    def accounts_account_id_reports_reportid_instances_get_with_http_info(self, account_id, reportid, **kwargs):
        """
        
        Retrieve report instances associated with a specific report, including the up-to-date report generation status. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_instances_get_with_http_info(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reportid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_reports_reportid_instances_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_reports_reportid_instances_get`")
        # verify the required parameter 'reportid' is set
        if ('reportid' not in params) or (params['reportid'] is None):
            raise ValueError("Missing the required parameter `reportid` when calling `accounts_account_id_reports_reportid_instances_get`")

        resource_path = '/accounts/{accountId}/reports/{reportid}/instances'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reportid' in params:
            path_params['reportid'] = params['reportid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_reports_reportid_instances_instance_id_file_get(self, account_id, reportid, instance_id, **kwargs):
        """
        
        Retrieve report instance output file, if output is available.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_instances_instance_id_file_get(account_id, reportid, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :param str instance_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_reports_reportid_instances_instance_id_file_get_with_http_info(account_id, reportid, instance_id, **kwargs)
        else:
            (data) = self.accounts_account_id_reports_reportid_instances_instance_id_file_get_with_http_info(account_id, reportid, instance_id, **kwargs)
            return data

    def accounts_account_id_reports_reportid_instances_instance_id_file_get_with_http_info(self, account_id, reportid, instance_id, **kwargs):
        """
        
        Retrieve report instance output file, if output is available.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_instances_instance_id_file_get_with_http_info(account_id, reportid, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :param str instance_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reportid', 'instance_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_reports_reportid_instances_instance_id_file_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_reports_reportid_instances_instance_id_file_get`")
        # verify the required parameter 'reportid' is set
        if ('reportid' not in params) or (params['reportid'] is None):
            raise ValueError("Missing the required parameter `reportid` when calling `accounts_account_id_reports_reportid_instances_instance_id_file_get`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `accounts_account_id_reports_reportid_instances_instance_id_file_get`")

        resource_path = '/accounts/{accountId}/reports/{reportid}/instances/{instanceId}/file'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reportid' in params:
            path_params['reportid'] = params['reportid']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_reports_reportid_instances_instance_id_get(self, account_id, reportid, instance_id, **kwargs):
        """
        
        A GET on the specific instance will retrieve report instance details, including the current report instance status.  All of the information required to understand the nature and limits of the reported data are contained in the payload, including the general description information as well as the list of parameters and the values assigned to those parameters. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_instances_instance_id_get(account_id, reportid, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :param str instance_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_reports_reportid_instances_instance_id_get_with_http_info(account_id, reportid, instance_id, **kwargs)
        else:
            (data) = self.accounts_account_id_reports_reportid_instances_instance_id_get_with_http_info(account_id, reportid, instance_id, **kwargs)
            return data

    def accounts_account_id_reports_reportid_instances_instance_id_get_with_http_info(self, account_id, reportid, instance_id, **kwargs):
        """
        
        A GET on the specific instance will retrieve report instance details, including the current report instance status.  All of the information required to understand the nature and limits of the reported data are contained in the payload, including the general description information as well as the list of parameters and the values assigned to those parameters. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_instances_instance_id_get_with_http_info(account_id, reportid, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :param str instance_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reportid', 'instance_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_reports_reportid_instances_instance_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_reports_reportid_instances_instance_id_get`")
        # verify the required parameter 'reportid' is set
        if ('reportid' not in params) or (params['reportid'] is None):
            raise ValueError("Missing the required parameter `reportid` when calling `accounts_account_id_reports_reportid_instances_instance_id_get`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `accounts_account_id_reports_reportid_instances_instance_id_get`")

        resource_path = '/accounts/{accountId}/reports/{reportid}/instances/{instanceId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reportid' in params:
            path_params['reportid'] = params['reportid']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_reports_reportid_instances_post(self, account_id, reportid, **kwargs):
        """
        
        POSTing to the instances resource of a specific report will create an instance of that report that pulls from data that is filtered by the supplied parameters.  Those parameter values must match the parameters that are required as defined by the report, as provided by issuing a GET on the report. <br><br> The sequence of events is essentially to... <ol>     <li>issue a GET on the desired report/report-id to retrieve the parameter and other details of the report</li>     <li>issue a POST on the /report/report-id/instances resource, using the parameter information retrieved in the initial call to define the data that is needed</li> </ol> The Location header will provide a link to the created report instance.  Note that the report instance itself contains only the metadata describing the instance.  A subsequent call to /report/report-id/instances/instance-id/file must be made to actually download the file. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_instances_post(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_reports_reportid_instances_post_with_http_info(account_id, reportid, **kwargs)
        else:
            (data) = self.accounts_account_id_reports_reportid_instances_post_with_http_info(account_id, reportid, **kwargs)
            return data

    def accounts_account_id_reports_reportid_instances_post_with_http_info(self, account_id, reportid, **kwargs):
        """
        
        POSTing to the instances resource of a specific report will create an instance of that report that pulls from data that is filtered by the supplied parameters.  Those parameter values must match the parameters that are required as defined by the report, as provided by issuing a GET on the report. <br><br> The sequence of events is essentially to... <ol>     <li>issue a GET on the desired report/report-id to retrieve the parameter and other details of the report</li>     <li>issue a POST on the /report/report-id/instances resource, using the parameter information retrieved in the initial call to define the data that is needed</li> </ol> The Location header will provide a link to the created report instance.  Note that the report instance itself contains only the metadata describing the instance.  A subsequent call to /report/report-id/instances/instance-id/file must be made to actually download the file. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_reports_reportid_instances_post_with_http_info(account_id, reportid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reportid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reportid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_reports_reportid_instances_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_reports_reportid_instances_post`")
        # verify the required parameter 'reportid' is set
        if ('reportid' not in params) or (params['reportid'] is None):
            raise ValueError("Missing the required parameter `reportid` when calling `accounts_account_id_reports_reportid_instances_post`")

        resource_path = '/accounts/{accountId}/reports/{reportid}/instances'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reportid' in params:
            path_params['reportid'] = params['reportid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sipcredentials_get(self, account_id, **kwargs):
        """
        
        GET is used to retrieve all SIP credentials for the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: An ID of the first element in a page.  This value will indicate the first value, not the count, of the initial entry in the page being requested.<br> It can be an index of SIP credential or a combination of user name and domain in form {userName}@{domain}. The initial page is tagged with the ID '1'. 
        :param int size: The number of items to include in a page
        :param str usernamefragment: The user name fragment. Min length - 3 characters.
        :param str domainfragment: The domain fragment. Min length - 3 characters.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sipcredentials_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sipcredentials_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_sipcredentials_get_with_http_info(self, account_id, **kwargs):
        """
        
        GET is used to retrieve all SIP credentials for the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str page: An ID of the first element in a page.  This value will indicate the first value, not the count, of the initial entry in the page being requested.<br> It can be an index of SIP credential or a combination of user name and domain in form {userName}@{domain}. The initial page is tagged with the ID '1'. 
        :param int size: The number of items to include in a page
        :param str usernamefragment: The user name fragment. Min length - 3 characters.
        :param str domainfragment: The domain fragment. Min length - 3 characters.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'page', 'size', 'usernamefragment', 'domainfragment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sipcredentials_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sipcredentials_get`")

        resource_path = '/accounts/{accountId}/sipcredentials'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'usernamefragment' in params:
            query_params['usernamefragment'] = params['usernamefragment']
        if 'domainfragment' in params:
            query_params['domainfragment'] = params['domainfragment']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sipcredentials_post(self, account_id, **kwargs):
        """
        
        POST is used to create SIP credentials and associate its with the account. The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>UserName</td>       <td>This is subscriber name or aggregated name and domain value(ex: John@bw.com). Field is required. Max length - 32 characters.</td>     </tr>     <tr>       <td>Domain</td>       <td>This is subscriber domain. Domain is optional and if present will be appended to the UserName with an '@'. Max length - 32 characters.</td>     </tr>     <tr>       <td>Hash1</td>       <td>This is hash value #1 in MD5 representation. Field is required. Max length - 64 characters.</td>     </tr>     <tr>       <td>Hash1b</td>       <td>This is hash value #2 in MD5 representation. Field is optional. Max length - 64 characters.</td>     </tr>   </tbody> </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sipcredentials_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sipcredentials_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_sipcredentials_post_with_http_info(self, account_id, **kwargs):
        """
        
        POST is used to create SIP credentials and associate its with the account. The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>UserName</td>       <td>This is subscriber name or aggregated name and domain value(ex: John@bw.com). Field is required. Max length - 32 characters.</td>     </tr>     <tr>       <td>Domain</td>       <td>This is subscriber domain. Domain is optional and if present will be appended to the UserName with an '@'. Max length - 32 characters.</td>     </tr>     <tr>       <td>Hash1</td>       <td>This is hash value #1 in MD5 representation. Field is required. Max length - 64 characters.</td>     </tr>     <tr>       <td>Hash1b</td>       <td>This is hash value #2 in MD5 representation. Field is optional. Max length - 64 characters.</td>     </tr>   </tbody> </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sipcredentials_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sipcredentials_post`")

        resource_path = '/accounts/{accountId}/sipcredentials'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sipcredentials_user_name_delete(self, account_id, user_name, **kwargs):
        """
        
        DELETE is used to delete SIP credential. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_user_name_delete(account_id, user_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str user_name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sipcredentials_user_name_delete_with_http_info(account_id, user_name, **kwargs)
        else:
            (data) = self.accounts_account_id_sipcredentials_user_name_delete_with_http_info(account_id, user_name, **kwargs)
            return data

    def accounts_account_id_sipcredentials_user_name_delete_with_http_info(self, account_id, user_name, **kwargs):
        """
        
        DELETE is used to delete SIP credential. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_user_name_delete_with_http_info(account_id, user_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str user_name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sipcredentials_user_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sipcredentials_user_name_delete`")
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params) or (params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `accounts_account_id_sipcredentials_user_name_delete`")

        resource_path = '/accounts/{accountId}/sipcredentials/{userName}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'user_name' in params:
            path_params['userName'] = params['user_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sipcredentials_user_name_get(self, account_id, user_name, **kwargs):
        """
        
        GET is used to retrieve SIP credential for the account by unique combination of user name and domain. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_user_name_get(account_id, user_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str user_name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sipcredentials_user_name_get_with_http_info(account_id, user_name, **kwargs)
        else:
            (data) = self.accounts_account_id_sipcredentials_user_name_get_with_http_info(account_id, user_name, **kwargs)
            return data

    def accounts_account_id_sipcredentials_user_name_get_with_http_info(self, account_id, user_name, **kwargs):
        """
        
        GET is used to retrieve SIP credential for the account by unique combination of user name and domain. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_user_name_get_with_http_info(account_id, user_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str user_name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sipcredentials_user_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sipcredentials_user_name_get`")
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params) or (params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `accounts_account_id_sipcredentials_user_name_get`")

        resource_path = '/accounts/{accountId}/sipcredentials/{userName}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'user_name' in params:
            path_params['userName'] = params['user_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sipcredentials_user_name_put(self, account_id, user_name, **kwargs):
        """
        
        PUT is used to change single SIP credential.<br> It is not possible to change the UserName or the Domain associated with the Hash Values.  To do so requires deletion of one set of credentials and addition of a new set of credentials.<br> The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>Hash1</td>       <td>This is hash value #1 in MD5 representation. Field is required. Max length - 64 characters.</td>     </tr>     <tr>       <td>Hash1b</td>       <td>This is hash value #2 in MD5 representation. Field is optional. Max length - 64 characters.</td>     </tr>   </tbody> </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_user_name_put(account_id, user_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str user_name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sipcredentials_user_name_put_with_http_info(account_id, user_name, **kwargs)
        else:
            (data) = self.accounts_account_id_sipcredentials_user_name_put_with_http_info(account_id, user_name, **kwargs)
            return data

    def accounts_account_id_sipcredentials_user_name_put_with_http_info(self, account_id, user_name, **kwargs):
        """
        
        PUT is used to change single SIP credential.<br> It is not possible to change the UserName or the Domain associated with the Hash Values.  To do so requires deletion of one set of credentials and addition of a new set of credentials.<br> The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>Hash1</td>       <td>This is hash value #1 in MD5 representation. Field is required. Max length - 64 characters.</td>     </tr>     <tr>       <td>Hash1b</td>       <td>This is hash value #2 in MD5 representation. Field is optional. Max length - 64 characters.</td>     </tr>   </tbody> </table> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sipcredentials_user_name_put_with_http_info(account_id, user_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str user_name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sipcredentials_user_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sipcredentials_user_name_put`")
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params) or (params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `accounts_account_id_sipcredentials_user_name_put`")

        resource_path = '/accounts/{accountId}/sipcredentials/{userName}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'user_name' in params:
            path_params['userName'] = params['user_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_get(self, account_id, **kwargs):
        """
        
        retrieve a list of all the sites associated with the account

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_sites_get_with_http_info(self, account_id, **kwargs):
        """
        
        retrieve a list of all the sites associated with the account

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_get`")

        resource_path = '/accounts/{accountId}/sites'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_post(self, account_id, **kwargs):
        """
        
        Add a site to the account

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_sites_post_with_http_info(self, account_id, **kwargs):
        """
        
        Add a site to the account

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_post`")

        resource_path = '/accounts/{accountId}/sites'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_delete(self, account_id, site_id, **kwargs):
        """
        
        deletes the site - sites can only be deleted if there are no SIP Peers attached to it

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_delete(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_delete_with_http_info(account_id, site_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_delete_with_http_info(account_id, site_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_delete_with_http_info(self, account_id, site_id, **kwargs):
        """
        
        deletes the site - sites can only be deleted if there are no SIP Peers attached to it

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_delete_with_http_info(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_delete`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_delete`")

        resource_path = '/accounts/{accountId}/sites/{siteId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_get(self, account_id, site_id, **kwargs):
        """
        
        retrieves the information associated with the site id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_get(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_get_with_http_info(account_id, site_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_get_with_http_info(account_id, site_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_get_with_http_info(self, account_id, site_id, **kwargs):
        """
        
        retrieves the information associated with the site id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_get_with_http_info(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_inservice_numbers_get(self, account_id, site_id, **kwargs):
        """
        
        Retrieves all the telephone numbers currently in service for the given site. <br>There are multiple parameters to search and sort the in-service numbers: <ul>     <li>LATA</li>     <li>Tier</li>     <li>Rate center</li>     <li>Area code</li>     <li>Npa-Nxx</li>     <li>State</li>     <li>City</li>     <li>Start Date</li>     <li>End date</li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_inservice_numbers_get(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str page: The first in-service number displayed on the page. \"1\" is used as a convention for the first number on the list.
        :param int size: The count of in-service numbers displayed on the page.
        :param int lata: A maximum five-digit number.
        :param int tier: 
        :param str rate_center: 
        :param str city: 
        :param str state: A two-letter representation of the State
        :param str area_code: 
        :param str npa_nxx: 
        :param str npa_nxxx: 
        :param date startdate: startdate and enddate must be together
        :param date enddate: startdate and enddate must be together
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_inservice_numbers_get_with_http_info(account_id, site_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_inservice_numbers_get_with_http_info(account_id, site_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_inservice_numbers_get_with_http_info(self, account_id, site_id, **kwargs):
        """
        
        Retrieves all the telephone numbers currently in service for the given site. <br>There are multiple parameters to search and sort the in-service numbers: <ul>     <li>LATA</li>     <li>Tier</li>     <li>Rate center</li>     <li>Area code</li>     <li>Npa-Nxx</li>     <li>State</li>     <li>City</li>     <li>Start Date</li>     <li>End date</li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_inservice_numbers_get_with_http_info(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str page: The first in-service number displayed on the page. \"1\" is used as a convention for the first number on the list.
        :param int size: The count of in-service numbers displayed on the page.
        :param int lata: A maximum five-digit number.
        :param int tier: 
        :param str rate_center: 
        :param str city: 
        :param str state: A two-letter representation of the State
        :param str area_code: 
        :param str npa_nxx: 
        :param str npa_nxxx: 
        :param date startdate: startdate and enddate must be together
        :param date enddate: startdate and enddate must be together
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'page', 'size', 'lata', 'tier', 'rate_center', 'city', 'state', 'area_code', 'npa_nxx', 'npa_nxxx', 'startdate', 'enddate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_inservice_numbers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_inservice_numbers_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_inservice_numbers_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/inserviceNumbers'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'lata' in params:
            query_params['lata'] = params['lata']
        if 'tier' in params:
            query_params['tier'] = params['tier']
        if 'rate_center' in params:
            query_params['rateCenter'] = params['rate_center']
        if 'city' in params:
            query_params['city'] = params['city']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'area_code' in params:
            query_params['areaCode'] = params['area_code']
        if 'npa_nxx' in params:
            query_params['npaNxx'] = params['npa_nxx']
        if 'npa_nxxx' in params:
            query_params['npaNxxx'] = params['npa_nxxx']
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_orders_get(self, account_id, site_id, size, page, **kwargs):
        """
        
        The GET method retrieves all the orders associated with the given site.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_orders_get(account_id, site_id, size, page, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param int size: Sets the amount of responses per page. (required)
        :param int page: The first orders ID to show on the page. \"1\" is used as a convention for the first page. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_orders_get_with_http_info(account_id, site_id, size, page, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_orders_get_with_http_info(account_id, site_id, size, page, **kwargs)
            return data

    def accounts_account_id_sites_site_id_orders_get_with_http_info(self, account_id, site_id, size, page, **kwargs):
        """
        
        The GET method retrieves all the orders associated with the given site.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_orders_get_with_http_info(account_id, site_id, size, page, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param int size: Sets the amount of responses per page. (required)
        :param int page: The first orders ID to show on the page. \"1\" is used as a convention for the first page. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'size', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_orders_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_orders_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `accounts_account_id_sites_site_id_orders_get`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `accounts_account_id_sites_site_id_orders_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/orders'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}
        if 'size' in params:
            query_params['size'] = params['size']
        if 'page' in params:
            query_params['page'] = params['page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_orders_orderid_get(self, account_id, site_id, orderid, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_orders_orderid_get(account_id, site_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_orders_orderid_get_with_http_info(account_id, site_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_orders_orderid_get_with_http_info(account_id, site_id, orderid, **kwargs)
            return data

    def accounts_account_id_sites_site_id_orders_orderid_get_with_http_info(self, account_id, site_id, orderid, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_orders_orderid_get_with_http_info(account_id, site_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_orders_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_orders_orderid_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_orders_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_sites_site_id_orders_orderid_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/orders/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_orders_orderid_tns_get(self, account_id, site_id, orderid, **kwargs):
        """
        
        Retrieves the Telephone Numbers associated by the given order ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_orders_orderid_tns_get(account_id, site_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_orders_orderid_tns_get_with_http_info(account_id, site_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_orders_orderid_tns_get_with_http_info(account_id, site_id, orderid, **kwargs)
            return data

    def accounts_account_id_sites_site_id_orders_orderid_tns_get_with_http_info(self, account_id, site_id, orderid, **kwargs):
        """
        
        Retrieves the Telephone Numbers associated by the given order ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_orders_orderid_tns_get_with_http_info(account_id, site_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_orders_orderid_tns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_orders_orderid_tns_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_orders_orderid_tns_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_sites_site_id_orders_orderid_tns_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/orders/{orderid}/tns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_portins_get(self, account_id, site_id, page, size, **kwargs):
        """
        
        Retrieves the port-in requests for the given site ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_portins_get(account_id, site_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str page: The port-in ID of the first order of the page. \"1\" is used as a convention for the first port-in in the site ID. (required)
        :param int size: The number of port-ins retrieved. (required)
        :param str status: Displays the port-ins with the given status.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_portins_get_with_http_info(account_id, site_id, page, size, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_portins_get_with_http_info(account_id, site_id, page, size, **kwargs)
            return data

    def accounts_account_id_sites_site_id_portins_get_with_http_info(self, account_id, site_id, page, size, **kwargs):
        """
        
        Retrieves the port-in requests for the given site ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_portins_get_with_http_info(account_id, site_id, page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str page: The port-in ID of the first order of the page. \"1\" is used as a convention for the first port-in in the site ID. (required)
        :param int size: The number of port-ins retrieved. (required)
        :param str status: Displays the port-ins with the given status.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'page', 'size', 'status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_portins_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_portins_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_portins_get`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `accounts_account_id_sites_site_id_portins_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `accounts_account_id_sites_site_id_portins_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/portins'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'status' in params:
            query_params['status'] = params['status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_put(self, account_id, site_id, **kwargs):
        """
        
        updates the contents of a site id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_put(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_put_with_http_info(account_id, site_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_put_with_http_info(account_id, site_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_put_with_http_info(self, account_id, site_id, **kwargs):
        """
        
        updates the contents of a site id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_put_with_http_info(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_put`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_put`")

        resource_path = '/accounts/{accountId}/sites/{siteId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_get(self, account_id, site_id, **kwargs):
        """
        
        Retrieve information about a Sip Peer or set of Sip Peers

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_get(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_get_with_http_info(account_id, site_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_get_with_http_info(account_id, site_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_get_with_http_info(self, account_id, site_id, **kwargs):
        """
        
        Retrieve information about a Sip Peer or set of Sip Peers

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_get_with_http_info(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_post(self, account_id, site_id, **kwargs):
        """
        
        Create a Sip Peer

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_post(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_post_with_http_info(account_id, site_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_post_with_http_info(account_id, site_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_post_with_http_info(self, account_id, site_id, **kwargs):
        """
        
        Create a Sip Peer

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_post_with_http_info(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_post`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_post`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_delete(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Delete a Sip Peer

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_delete(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_sippeer_id_delete_with_http_info(account_id, site_id, sippeer_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_sippeer_id_delete_with_http_info(account_id, site_id, sippeer_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_delete_with_http_info(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Delete a Sip Peer

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_delete_with_http_info(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'sippeer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_sippeer_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_delete`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_delete`")
        # verify the required parameter 'sippeer_id' is set
        if ('sippeer_id' not in params) or (params['sippeer_id'] is None):
            raise ValueError("Missing the required parameter `sippeer_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_delete`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers/{sippeerId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'sippeer_id' in params:
            path_params['sippeerId'] = params['sippeer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_get(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Retrieve a the data associated with a Sip Peer 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_get(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_sippeer_id_get_with_http_info(account_id, site_id, sippeer_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_sippeer_id_get_with_http_info(account_id, site_id, sippeer_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_get_with_http_info(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Retrieve a the data associated with a Sip Peer 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_get_with_http_info(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'sippeer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_sippeer_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_get`")
        # verify the required parameter 'sippeer_id' is set
        if ('sippeer_id' not in params) or (params['sippeer_id'] is None):
            raise ValueError("Missing the required parameter `sippeer_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers/{sippeerId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'sippeer_id' in params:
            path_params['sippeerId'] = params['sippeer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        The POST method moves all telephone numbers specified in the body to the given SIP peer.<br> The source SIP peer is determined by the Telephone Number, i.e. the PUT method can move multiple numbers from different source SIP peers.<br> The destination SIP peer is specified in the URL.<br> NOTE: only a maximum of 5000 Telephone Numbers can be moved in one operation. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post_with_http_info(account_id, site_id, sippeer_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post_with_http_info(account_id, site_id, sippeer_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post_with_http_info(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        The POST method moves all telephone numbers specified in the body to the given SIP peer.<br> The source SIP peer is determined by the Telephone Number, i.e. the PUT method can move multiple numbers from different source SIP peers.<br> The destination SIP peer is specified in the URL.<br> NOTE: only a maximum of 5000 Telephone Numbers can be moved in one operation. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post_with_http_info(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'sippeer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post`")
        # verify the required parameter 'sippeer_id' is set
        if ('sippeer_id' not in params) or (params['sippeer_id'] is None):
            raise ValueError("Missing the required parameter `sippeer_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_movetns_post`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers/{sippeerId}/movetns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'sippeer_id' in params:
            path_params['sippeerId'] = params['sippeer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_put(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Update a Sip Peer There are a few rules used to eliminate IP address collisions.  The primary restriction is on the ability to share Term IP addresses across IRIS structural elements. Essentially... <ul><li>Term Addresses cannot be shared anywhere</li> <li>SMS addresses can be shared, and can be different than Term IP Addresses </li> <li>VoiceHost and VoiceHostGroup addresses can be shared between SIP Peers, and can be different than or the same as Term IP Addresses </li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_put(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_sippeer_id_put_with_http_info(account_id, site_id, sippeer_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_sippeer_id_put_with_http_info(account_id, site_id, sippeer_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_put_with_http_info(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Update a Sip Peer There are a few rules used to eliminate IP address collisions.  The primary restriction is on the ability to share Term IP addresses across IRIS structural elements. Essentially... <ul><li>Term Addresses cannot be shared anywhere</li> <li>SMS addresses can be shared, and can be different than Term IP Addresses </li> <li>VoiceHost and VoiceHostGroup addresses can be shared between SIP Peers, and can be different than or the same as Term IP Addresses </li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_put_with_http_info(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'sippeer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_sippeer_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_put`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_put`")
        # verify the required parameter 'sippeer_id' is set
        if ('sippeer_id' not in params) or (params['sippeer_id'] is None):
            raise ValueError("Missing the required parameter `sippeer_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_put`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers/{sippeerId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'sippeer_id' in params:
            path_params['sippeerId'] = params['sippeer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Retrieve information about a Telephone number or set of Telephone numbers

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :param bool include_attributes: If the value is false SipPeerTelephoneNumber will contain FullNumber tags only. This makes processing faster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get_with_http_info(account_id, site_id, sippeer_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get_with_http_info(account_id, site_id, sippeer_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get_with_http_info(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Retrieve information about a Telephone number or set of Telephone numbers

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get_with_http_info(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :param bool include_attributes: If the value is false SipPeerTelephoneNumber will contain FullNumber tags only. This makes processing faster.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'sippeer_id', 'include_attributes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get`")
        # verify the required parameter 'sippeer_id' is set
        if ('sippeer_id' not in params) or (params['sippeer_id'] is None):
            raise ValueError("Missing the required parameter `sippeer_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers/{sippeerId}/tns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'sippeer_id' in params:
            path_params['sippeerId'] = params['sippeer_id']

        query_params = {}
        if 'include_attributes' in params:
            query_params['includeAttributes'] = params['include_attributes']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get(self, account_id, site_id, sippeer_id, tn, **kwargs):
        """
        
        Link for receiving information about telephone number. CallForward - Does this telephone number have call forwarding or not. CallingNameDisplay - Calling Name of the caller is available to the user or not on incoming calls. TnAttributes - Is this telephone number protected or not. MessagingSettings -  Does this telephone number have any messaging system configured. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get(account_id, site_id, sippeer_id, tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get_with_http_info(account_id, site_id, sippeer_id, tn, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get_with_http_info(account_id, site_id, sippeer_id, tn, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get_with_http_info(self, account_id, site_id, sippeer_id, tn, **kwargs):
        """
        
        Link for receiving information about telephone number. CallForward - Does this telephone number have call forwarding or not. CallingNameDisplay - Calling Name of the caller is available to the user or not on incoming calls. TnAttributes - Is this telephone number protected or not. MessagingSettings -  Does this telephone number have any messaging system configured. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get_with_http_info(account_id, site_id, sippeer_id, tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'sippeer_id', 'tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get`")
        # verify the required parameter 'sippeer_id' is set
        if ('sippeer_id' not in params) or (params['sippeer_id'] is None):
            raise ValueError("Missing the required parameter `sippeer_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get`")
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers/{sippeerId}/tns/{tn}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'sippeer_id' in params:
            path_params['sippeerId'] = params['sippeer_id']
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put(self, account_id, site_id, sippeer_id, tn, **kwargs):
        """
        
        This API can be used by the Bandwidth Dashboard or general API users to update the settings for TNs allocated to their account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put(account_id, site_id, sippeer_id, tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put_with_http_info(account_id, site_id, sippeer_id, tn, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put_with_http_info(account_id, site_id, sippeer_id, tn, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put_with_http_info(self, account_id, site_id, sippeer_id, tn, **kwargs):
        """
        
        This API can be used by the Bandwidth Dashboard or general API users to update the settings for TNs allocated to their account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put_with_http_info(account_id, site_id, sippeer_id, tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'sippeer_id', 'tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put`")
        # verify the required parameter 'sippeer_id' is set
        if ('sippeer_id' not in params) or (params['sippeer_id'] is None):
            raise ValueError("Missing the required parameter `sippeer_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put`")
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_tns_tn_put`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers/{sippeerId}/tns/{tn}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'sippeer_id' in params:
            path_params['sippeerId'] = params['sippeer_id']
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Retrieve count of Telephone numbers for Sip Peer

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :param list[str] feature: Telephone number feature
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get_with_http_info(account_id, site_id, sippeer_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get_with_http_info(account_id, site_id, sippeer_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get_with_http_info(self, account_id, site_id, sippeer_id, **kwargs):
        """
        
        Retrieve count of Telephone numbers for Sip Peer

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get_with_http_info(account_id, site_id, sippeer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :param str sippeer_id:  (required)
        :param list[str] feature: Telephone number feature
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id', 'sippeer_id', 'feature']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get`")
        # verify the required parameter 'sippeer_id' is set
        if ('sippeer_id' not in params) or (params['sippeer_id'] is None):
            raise ValueError("Missing the required parameter `sippeer_id` when calling `accounts_account_id_sites_site_id_sippeers_sippeer_id_totaltns_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/sippeers/{sippeerId}/totaltns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']
        if 'sippeer_id' in params:
            path_params['sippeerId'] = params['sippeer_id']

        query_params = {}
        if 'feature' in params:
            query_params['feature'] = params['feature']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_sites_site_id_totaltns_get(self, account_id, site_id, **kwargs):
        """
        
        Retrieve count of Telephone numbers for the indicated site

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_totaltns_get(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_sites_site_id_totaltns_get_with_http_info(account_id, site_id, **kwargs)
        else:
            (data) = self.accounts_account_id_sites_site_id_totaltns_get_with_http_info(account_id, site_id, **kwargs)
            return data

    def accounts_account_id_sites_site_id_totaltns_get_with_http_info(self, account_id, site_id, **kwargs):
        """
        
        Retrieve count of Telephone numbers for the indicated site

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_sites_site_id_totaltns_get_with_http_info(account_id, site_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str site_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'site_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_sites_site_id_totaltns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_sites_site_id_totaltns_get`")
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params) or (params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `accounts_account_id_sites_site_id_totaltns_get`")

        resource_path = '/accounts/{accountId}/sites/{siteId}/totaltns'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_subscriptions_get(self, account_id, **kwargs):
        """
        
        GET is used to retrieve all subscriptions for the account (including email and callback subscriptions). The returned information reflects the subscription as it has been defined, and for callback subscriptions will reflect the status of the latest attempt to place the callback.  The <Status> element will indicate if an error is being encountered when the Bandwidth Dashboard attempts to place the callback. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_subscriptions_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_subscriptions_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_subscriptions_get_with_http_info(self, account_id, **kwargs):
        """
        
        GET is used to retrieve all subscriptions for the account (including email and callback subscriptions). The returned information reflects the subscription as it has been defined, and for callback subscriptions will reflect the status of the latest attempt to place the callback.  The <Status> element will indicate if an error is being encountered when the Bandwidth Dashboard attempts to place the callback. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_subscriptions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_subscriptions_get`")

        resource_path = '/accounts/{accountId}/subscriptions'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_subscriptions_post(self, account_id, **kwargs):
        """
        
        A POST on the /subscriptions resource is used to request a new subscription for an account.<br> The POST creates a new e-mail or callback subscription. A well-formed POST will create a subscription resource, and return a subscription ID as part of the location header. The ID is used to uniquely identify the subscription. The user should submit the desired e-mail address for notifications and the frequency with which he wants to get the updates: DAILY (for daily digests) or NONE (immediately after events). OrderId is optional. If OrderId is specified only notifications will be sent for events related to that order. If OrderId is omitted, notifications will be sent related to events of all orders of the specified type.<br> For email subscriptions use a body like this:<br> ``` <Subscription>     <OrderType> [ portins | portouts | orders | disconnects | dldas | lsrorders | e911s | tnoptions | externalTns] </OrderType> <!-- required -->     <OrderId> [ UUID ] </OrderId> <!-- optional, if provided notifications will only be sent for events regarding this specific order, if omitted notifications regarding events for all orders of the specified type will be sent -->     <EmailSubscription>         <Email> [ email address] </Email>         <DigestRequested> [ NONE | DAILY ] </DigestRequested> <!-- required -->     </EmailSubscription> </Subscription> ``` For callback subscriptions use a body like this:<br> ``` <Subscription>     <OrderType> [portins | portouts | orders | disconnects | dldas | lsrorders | e911s | tnoptions | externalTns] </OrderType> <!-- same rules and values as above -->     <OrderId> [UUID]</OrderId> <!-- same rules and value as above -->     <CallbackSubscription>         <URL> [valid publically addressable URL] </URL> <!-- the URL that notifications should get POSTed to, HTTPS is highly recommended -->         <Expiry> [time in seconds] </Expiry> <!-- the number of seconds after which to expire this subscription -->         <CallbackCredentials> <!-- optional, but recommended; these credentials will be used to when authenticating with the notification receiving server -->             <BasicAuthentication> <!-- optional, the endpoint may be secured with BASIC auth -->                 <Username> [username] </Username> <!-- max 100 characters -->                 <Password> [password] </Password> <!-- the password will be stored encrypted and never returned via the API -->             </BasicAuthentication>             <!-- optional, a BASE64 encoded public key matching the notification receiving server -->             <PublicKey>LS0tLS1CRUdJTiBDRVJUSUZJ [...] kQgQ0VSVElGSUNBVEUtLS0tLQ0K</PublicKey>         </CallbackCredentials>     </CallbackSubscription> </Subscription> ``` The credentials used to impose security on the callbacks are defined in the <CallbackCredentials> element.  The Basic authentication is straightforward, but the <PublicKey> requires a little more explanation.  Please see the document to the left on Mutual Authentication for CallBacks.<p> When an event happens that had been subscribed to with a callback subscription (order update, note added to order), the following payload will be POSTed to the URL of the callback subscription.<br>More detail can be found in the API documentation for the fictitious endpoint /callbacks ```xml <Notification>     <SubscriptionId>...</SubscriptionId>     <OrderType>portins | portouts | orders | disconnects | dldas | lsrorders | e911s| tnoptions | externalTns</OrderType>     <OrderId>...</OrderId>     <!-- for order update events -->     <Status>COMPLETE | FAILED | PARTIAL | EXCEPTION ... </Status>     <!-- for order update events -->     <Message>...</Message>     <!-- for note events -->     <Note>...</Note>     <!-- for portins/portouts/orders/disconnects OrderTypes -->     <CompletedTelephoneNumbers>         <TelephoneNumber> ... </TelephoneNumber>         <!-- ... -->     </CompletedTelephoneNumbers> </Notification> ``` 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_subscriptions_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_subscriptions_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_subscriptions_post_with_http_info(self, account_id, **kwargs):
        """
        
        A POST on the /subscriptions resource is used to request a new subscription for an account.<br> The POST creates a new e-mail or callback subscription. A well-formed POST will create a subscription resource, and return a subscription ID as part of the location header. The ID is used to uniquely identify the subscription. The user should submit the desired e-mail address for notifications and the frequency with which he wants to get the updates: DAILY (for daily digests) or NONE (immediately after events). OrderId is optional. If OrderId is specified only notifications will be sent for events related to that order. If OrderId is omitted, notifications will be sent related to events of all orders of the specified type.<br> For email subscriptions use a body like this:<br> ``` <Subscription>     <OrderType> [ portins | portouts | orders | disconnects | dldas | lsrorders | e911s | tnoptions | externalTns] </OrderType> <!-- required -->     <OrderId> [ UUID ] </OrderId> <!-- optional, if provided notifications will only be sent for events regarding this specific order, if omitted notifications regarding events for all orders of the specified type will be sent -->     <EmailSubscription>         <Email> [ email address] </Email>         <DigestRequested> [ NONE | DAILY ] </DigestRequested> <!-- required -->     </EmailSubscription> </Subscription> ``` For callback subscriptions use a body like this:<br> ``` <Subscription>     <OrderType> [portins | portouts | orders | disconnects | dldas | lsrorders | e911s | tnoptions | externalTns] </OrderType> <!-- same rules and values as above -->     <OrderId> [UUID]</OrderId> <!-- same rules and value as above -->     <CallbackSubscription>         <URL> [valid publically addressable URL] </URL> <!-- the URL that notifications should get POSTed to, HTTPS is highly recommended -->         <Expiry> [time in seconds] </Expiry> <!-- the number of seconds after which to expire this subscription -->         <CallbackCredentials> <!-- optional, but recommended; these credentials will be used to when authenticating with the notification receiving server -->             <BasicAuthentication> <!-- optional, the endpoint may be secured with BASIC auth -->                 <Username> [username] </Username> <!-- max 100 characters -->                 <Password> [password] </Password> <!-- the password will be stored encrypted and never returned via the API -->             </BasicAuthentication>             <!-- optional, a BASE64 encoded public key matching the notification receiving server -->             <PublicKey>LS0tLS1CRUdJTiBDRVJUSUZJ [...] kQgQ0VSVElGSUNBVEUtLS0tLQ0K</PublicKey>         </CallbackCredentials>     </CallbackSubscription> </Subscription> ``` The credentials used to impose security on the callbacks are defined in the <CallbackCredentials> element.  The Basic authentication is straightforward, but the <PublicKey> requires a little more explanation.  Please see the document to the left on Mutual Authentication for CallBacks.<p> When an event happens that had been subscribed to with a callback subscription (order update, note added to order), the following payload will be POSTed to the URL of the callback subscription.<br>More detail can be found in the API documentation for the fictitious endpoint /callbacks ```xml <Notification>     <SubscriptionId>...</SubscriptionId>     <OrderType>portins | portouts | orders | disconnects | dldas | lsrorders | e911s| tnoptions | externalTns</OrderType>     <OrderId>...</OrderId>     <!-- for order update events -->     <Status>COMPLETE | FAILED | PARTIAL | EXCEPTION ... </Status>     <!-- for order update events -->     <Message>...</Message>     <!-- for note events -->     <Note>...</Note>     <!-- for portins/portouts/orders/disconnects OrderTypes -->     <CompletedTelephoneNumbers>         <TelephoneNumber> ... </TelephoneNumber>         <!-- ... -->     </CompletedTelephoneNumbers> </Notification> ``` 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_subscriptions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_subscriptions_post`")

        resource_path = '/accounts/{accountId}/subscriptions'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_subscriptions_subscriptionid_delete(self, account_id, subscriptionid, **kwargs):
        """
        
        Deletes the specified subscription. Note that deleting subscriptions is only supported on a one-by-one basis. Deleting all subscriptions associated with an order requires GETting all of those subscriptions, then deleting them one by one. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_subscriptionid_delete(account_id, subscriptionid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str subscriptionid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_subscriptions_subscriptionid_delete_with_http_info(account_id, subscriptionid, **kwargs)
        else:
            (data) = self.accounts_account_id_subscriptions_subscriptionid_delete_with_http_info(account_id, subscriptionid, **kwargs)
            return data

    def accounts_account_id_subscriptions_subscriptionid_delete_with_http_info(self, account_id, subscriptionid, **kwargs):
        """
        
        Deletes the specified subscription. Note that deleting subscriptions is only supported on a one-by-one basis. Deleting all subscriptions associated with an order requires GETting all of those subscriptions, then deleting them one by one. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_subscriptionid_delete_with_http_info(account_id, subscriptionid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str subscriptionid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'subscriptionid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_subscriptions_subscriptionid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_subscriptions_subscriptionid_delete`")
        # verify the required parameter 'subscriptionid' is set
        if ('subscriptionid' not in params) or (params['subscriptionid'] is None):
            raise ValueError("Missing the required parameter `subscriptionid` when calling `accounts_account_id_subscriptions_subscriptionid_delete`")

        resource_path = '/accounts/{accountId}/subscriptions/{subscriptionid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'subscriptionid' in params:
            path_params['subscriptionid'] = params['subscriptionid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_subscriptions_subscriptionid_get(self, account_id, subscriptionid, **kwargs):
        """
        
        Retrieves the information associated with the subscription ID. The returned information reflects the subscription as it has been defined, and for callback subscriptions will reflect the status of the latest attempt to place the callback.  The <status> element will indicate if an error is being encountered when the Bandwidth Dashboard attempts to place the callback. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_subscriptionid_get(account_id, subscriptionid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str subscriptionid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_subscriptions_subscriptionid_get_with_http_info(account_id, subscriptionid, **kwargs)
        else:
            (data) = self.accounts_account_id_subscriptions_subscriptionid_get_with_http_info(account_id, subscriptionid, **kwargs)
            return data

    def accounts_account_id_subscriptions_subscriptionid_get_with_http_info(self, account_id, subscriptionid, **kwargs):
        """
        
        Retrieves the information associated with the subscription ID. The returned information reflects the subscription as it has been defined, and for callback subscriptions will reflect the status of the latest attempt to place the callback.  The <status> element will indicate if an error is being encountered when the Bandwidth Dashboard attempts to place the callback. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_subscriptionid_get_with_http_info(account_id, subscriptionid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str subscriptionid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'subscriptionid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_subscriptions_subscriptionid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_subscriptions_subscriptionid_get`")
        # verify the required parameter 'subscriptionid' is set
        if ('subscriptionid' not in params) or (params['subscriptionid'] is None):
            raise ValueError("Missing the required parameter `subscriptionid` when calling `accounts_account_id_subscriptions_subscriptionid_get`")

        resource_path = '/accounts/{accountId}/subscriptions/{subscriptionid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'subscriptionid' in params:
            path_params['subscriptionid'] = params['subscriptionid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_subscriptions_subscriptionid_put(self, account_id, subscriptionid, **kwargs):
        """
        
        Updates the subscription. This can be be used to update various values (expiry, email address, url, credentials...). Note that the initial state changes for an order may happen very quickly, so subscribing to an order once the system creates it needs to account for the fact that the initial state may be different based on timing factors. It is recommended that the application creating the subscription check the order status after the subscription is created to ensure the correct initial condition. <br> The same rules around valid or possible values as for POSTs apply. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_subscriptionid_put(account_id, subscriptionid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str subscriptionid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_subscriptions_subscriptionid_put_with_http_info(account_id, subscriptionid, **kwargs)
        else:
            (data) = self.accounts_account_id_subscriptions_subscriptionid_put_with_http_info(account_id, subscriptionid, **kwargs)
            return data

    def accounts_account_id_subscriptions_subscriptionid_put_with_http_info(self, account_id, subscriptionid, **kwargs):
        """
        
        Updates the subscription. This can be be used to update various values (expiry, email address, url, credentials...). Note that the initial state changes for an order may happen very quickly, so subscribing to an order once the system creates it needs to account for the fact that the initial state may be different based on timing factors. It is recommended that the application creating the subscription check the order status after the subscription is created to ensure the correct initial condition. <br> The same rules around valid or possible values as for POSTs apply. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_subscriptions_subscriptionid_put_with_http_info(account_id, subscriptionid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str subscriptionid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'subscriptionid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_subscriptions_subscriptionid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_subscriptions_subscriptionid_put`")
        # verify the required parameter 'subscriptionid' is set
        if ('subscriptionid' not in params) or (params['subscriptionid'] is None):
            raise ValueError("Missing the required parameter `subscriptionid` when calling `accounts_account_id_subscriptions_subscriptionid_put`")

        resource_path = '/accounts/{accountId}/subscriptions/{subscriptionid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'subscriptionid' in params:
            path_params['subscriptionid'] = params['subscriptionid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_tnoptions_get(self, account_id, **kwargs):
        """
        
        Retrieve a list of the TN Option orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnoptions_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param list[str] status: The status of the TN Option order being searched for.
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str customer_order_id: The Customer Order ID is an ID assigned by the account owner to provide a reference number for the TN Option order.
        :param str modified_date_from: For Date-based searches, the starting date of a date range that will be used to find TN Option Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str modified_date_to: For Date-based searches, the ending date of a date range that will be used to find TN Option Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str created_date_from: Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd
        :param str created_date_to: Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd
        :param str last_modified_after: Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd
        :param str last_modified_by: This is the user-name of the user that last modified the TN Option Order.
        :param str order_id_fragment: This search parameter represents the internal Bandwidth Dashboard ID that has been assigned to the TN Option Order.  This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.
        :param bool order_details: If set to true, a list of order details will be displayed instead the summary information.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_tnoptions_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_tnoptions_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_tnoptions_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieve a list of the TN Option orders that are associated with the account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnoptions_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param list[str] status: The status of the TN Option order being searched for.
        :param str tn: A Telephone Number (TN) that is referenced in the order
        :param str customer_order_id: The Customer Order ID is an ID assigned by the account owner to provide a reference number for the TN Option order.
        :param str modified_date_from: For Date-based searches, the starting date of a date range that will be used to find TN Option Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str modified_date_to: For Date-based searches, the ending date of a date range that will be used to find TN Option Orders that were modified within the date range.  It is in the form yyyy-MM-dd.
        :param str created_date_from: Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd
        :param str created_date_to: Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd
        :param str last_modified_after: Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd
        :param str last_modified_by: This is the user-name of the user that last modified the TN Option Order.
        :param str order_id_fragment: This search parameter represents the internal Bandwidth Dashboard ID that has been assigned to the TN Option Order.  This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.
        :param bool order_details: If set to true, a list of order details will be displayed instead the summary information.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'status', 'tn', 'customer_order_id', 'modified_date_from', 'modified_date_to', 'created_date_from', 'created_date_to', 'last_modified_after', 'last_modified_by', 'order_id_fragment', 'order_details']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_tnoptions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_tnoptions_get`")

        resource_path = '/accounts/{accountId}/tnoptions'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'status' in params:
            query_params['status'] = params['status']
        if 'tn' in params:
            query_params['tn'] = params['tn']
        if 'customer_order_id' in params:
            query_params['customerOrderId'] = params['customer_order_id']
        if 'modified_date_from' in params:
            query_params['modifiedDateFrom'] = params['modified_date_from']
        if 'modified_date_to' in params:
            query_params['modifiedDateTo'] = params['modified_date_to']
        if 'created_date_from' in params:
            query_params['createdDateFrom'] = params['created_date_from']
        if 'created_date_to' in params:
            query_params['createdDateTo'] = params['created_date_to']
        if 'last_modified_after' in params:
            query_params['lastModifiedAfter'] = params['last_modified_after']
        if 'last_modified_by' in params:
            query_params['lastModifiedBy'] = params['last_modified_by']
        if 'order_id_fragment' in params:
            query_params['orderIdFragment'] = params['order_id_fragment']
        if 'order_details' in params:
            query_params['orderDetails'] = params['order_details']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_tnoptions_orderid_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve information about a TN Option Order with specified ID. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnoptions_orderid_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_tnoptions_orderid_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_tnoptions_orderid_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_tnoptions_orderid_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve information about a TN Option Order with specified ID. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnoptions_orderid_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_tnoptions_orderid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_tnoptions_orderid_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_tnoptions_orderid_get`")

        resource_path = '/accounts/{accountId}/tnoptions/{orderid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_tnoptions_orderid_history_get(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the history information associated with an order 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnoptions_orderid_history_get(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_tnoptions_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
        else:
            (data) = self.accounts_account_id_tnoptions_orderid_history_get_with_http_info(account_id, orderid, **kwargs)
            return data

    def accounts_account_id_tnoptions_orderid_history_get_with_http_info(self, account_id, orderid, **kwargs):
        """
        
        Retrieve the history information associated with an order 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnoptions_orderid_history_get_with_http_info(account_id, orderid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str orderid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'orderid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_tnoptions_orderid_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_tnoptions_orderid_history_get`")
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params) or (params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `accounts_account_id_tnoptions_orderid_history_get`")

        resource_path = '/accounts/{accountId}/tnoptions/{orderid}/history'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_tnoptions_post(self, account_id, **kwargs):
        """
        
        Create TN Option order to assign line features to the telephone number. The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>TnOptionGroups</td>       <td>A list of TnOptionGroups.</td>     </tr>     <tr>       <td>TnOptionGroup</td>       <td>Contains list of telephone numbers and set of TN options you want to assign to all TNs in the list.</td>     </tr>   </tbody> </table> There are TN Option values: <ul> <li> TelephoneNumber - [ 10digit ] </li> <li> CallingNameDisplay - [ on | off | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> NumberFormat - [ 10digit | 11digit | e164 | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> RPIDFormat - [ 10digit | 11digit | e164 | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> RewriteUser - [ string | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> CallForward - [ 10digit | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> Protected - [ true | false | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> Sms - [ on | off | <i>unchanged</i>] </li> <li> FinalDestinationURI - [ string | <i>unchanged</i> | <i>systemdefault</i>] </li> <ul>   <li>a 10 digit telephone number, or</li>   <li>a SIP URI ( without the sip: prefix )     <ul>       <li>in the form address-string@host IP:port, where </li>       <li>the host IP is an IPv4 address in the standard numerical n.n.n.n. form, and </li>       <li>the port is numeric, and optional</li>       <li>containing [a-z,A-Z,0-9], with ':', '.' and '@' to delimit the components of the overall string, and</li>       <li>less than 60 characters long.</li>     </ul>   </li> </ul> </ul> Where: <ul> <li type=\"square\"> <i>systemdefault</i> - implies that the element profile value should be removed so that the TN changes back to the default system behavior;</li> <li type=\"square\"> <i>unchanged</i> - the value should remain unchanged - implies a read before write model.</li> <li type=\"square\"><u>Leaving the element out of the payload is equivalent to <i>unchanged</i>.</u></li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnoptions_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_tnoptions_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_tnoptions_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_tnoptions_post_with_http_info(self, account_id, **kwargs):
        """
        
        Create TN Option order to assign line features to the telephone number. The key data elements in the submission are -  <table style=\"text-align: left; width: 80%;\"  border=\"1\" cellpadding=\"2\" cellspacing=\"2\">   <tbody>     <tr>       <td>TnOptionGroups</td>       <td>A list of TnOptionGroups.</td>     </tr>     <tr>       <td>TnOptionGroup</td>       <td>Contains list of telephone numbers and set of TN options you want to assign to all TNs in the list.</td>     </tr>   </tbody> </table> There are TN Option values: <ul> <li> TelephoneNumber - [ 10digit ] </li> <li> CallingNameDisplay - [ on | off | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> NumberFormat - [ 10digit | 11digit | e164 | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> RPIDFormat - [ 10digit | 11digit | e164 | <i>unchanged</i> | <i>systemdefault</i> ] </li> <li> RewriteUser - [ string | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> CallForward - [ 10digit | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> Protected - [ true | false | <i>unchanged</i> | <i>systemdefault</i>] </li> <li> Sms - [ on | off | <i>unchanged</i>] </li> <li> FinalDestinationURI - [ string | <i>unchanged</i> | <i>systemdefault</i>] </li> <ul>   <li>a 10 digit telephone number, or</li>   <li>a SIP URI ( without the sip: prefix )     <ul>       <li>in the form address-string@host IP:port, where </li>       <li>the host IP is an IPv4 address in the standard numerical n.n.n.n. form, and </li>       <li>the port is numeric, and optional</li>       <li>containing [a-z,A-Z,0-9], with ':', '.' and '@' to delimit the components of the overall string, and</li>       <li>less than 60 characters long.</li>     </ul>   </li> </ul> </ul> Where: <ul> <li type=\"square\"> <i>systemdefault</i> - implies that the element profile value should be removed so that the TN changes back to the default system behavior;</li> <li type=\"square\"> <i>unchanged</i> - the value should remain unchanged - implies a read before write model.</li> <li type=\"square\"><u>Leaving the element out of the payload is equivalent to <i>unchanged</i>.</u></li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnoptions_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_tnoptions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_tnoptions_post`")

        resource_path = '/accounts/{accountId}/tnoptions'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_tnreservation_post(self, account_id, **kwargs):
        """
        
        Reserves a telephone number or a set of telephone numbers for a default time of 4 hours. A successful reservation returns a location header that can be used to retrieve the reservation at a later time.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnreservation_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_tnreservation_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_tnreservation_post_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_tnreservation_post_with_http_info(self, account_id, **kwargs):
        """
        
        Reserves a telephone number or a set of telephone numbers for a default time of 4 hours. A successful reservation returns a location header that can be used to retrieve the reservation at a later time.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnreservation_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_tnreservation_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_tnreservation_post`")

        resource_path = '/accounts/{accountId}/tnreservation'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_tnreservation_reservationid_delete(self, account_id, reservationid, **kwargs):
        """
        
        Deletes a TN reservation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnreservation_reservationid_delete(account_id, reservationid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reservationid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_tnreservation_reservationid_delete_with_http_info(account_id, reservationid, **kwargs)
        else:
            (data) = self.accounts_account_id_tnreservation_reservationid_delete_with_http_info(account_id, reservationid, **kwargs)
            return data

    def accounts_account_id_tnreservation_reservationid_delete_with_http_info(self, account_id, reservationid, **kwargs):
        """
        
        Deletes a TN reservation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnreservation_reservationid_delete_with_http_info(account_id, reservationid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reservationid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reservationid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_tnreservation_reservationid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_tnreservation_reservationid_delete`")
        # verify the required parameter 'reservationid' is set
        if ('reservationid' not in params) or (params['reservationid'] is None):
            raise ValueError("Missing the required parameter `reservationid` when calling `accounts_account_id_tnreservation_reservationid_delete`")

        resource_path = '/accounts/{accountId}/tnreservation/{reservationid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reservationid' in params:
            path_params['reservationid'] = params['reservationid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_tnreservation_reservationid_get(self, account_id, reservationid, **kwargs):
        """
        
        Retrieves a TN reservation's information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnreservation_reservationid_get(account_id, reservationid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reservationid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_tnreservation_reservationid_get_with_http_info(account_id, reservationid, **kwargs)
        else:
            (data) = self.accounts_account_id_tnreservation_reservationid_get_with_http_info(account_id, reservationid, **kwargs)
            return data

    def accounts_account_id_tnreservation_reservationid_get_with_http_info(self, account_id, reservationid, **kwargs):
        """
        
        Retrieves a TN reservation's information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_tnreservation_reservationid_get_with_http_info(account_id, reservationid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :param str reservationid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'reservationid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_tnreservation_reservationid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_tnreservation_reservationid_get`")
        # verify the required parameter 'reservationid' is set
        if ('reservationid' not in params) or (params['reservationid'] is None):
            raise ValueError("Missing the required parameter `reservationid` when calling `accounts_account_id_tnreservation_reservationid_get`")

        resource_path = '/accounts/{accountId}/tnreservation/{reservationid}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'reservationid' in params:
            path_params['reservationid'] = params['reservationid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def accounts_account_id_users_get(self, account_id, **kwargs):
        """
        
        Retrieves a list of users as specified by the account ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_users_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.accounts_account_id_users_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.accounts_account_id_users_get_with_http_info(account_id, **kwargs)
            return data

    def accounts_account_id_users_get_with_http_info(self, account_id, **kwargs):
        """
        
        Retrieves a list of users as specified by the account ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.accounts_account_id_users_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_account_id_users_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accounts_account_id_users_get`")

        resource_path = '/accounts/{accountId}/users'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def callbacks_notification_callback_api_post(self, **kwargs):
        """
        
        The POST to the callback API contains a summary of the order that is independent of the type of the order that caused the event that in turn caused the notification callback.  This requires that the customer's end system place an API call to the Bandwidth Dashboard to gather additional details on the change to the order if that is important.  <br><br> This approach was taken for two reasons: <ul> <li>some (or many) of the notifications might not require action.</li> <li>since orders contain different information, providing order-specific information would cause an undesirable tight linkage between notifications and every type of order, mandating API changes whenever the data associated with an order changed. </li> </ul><br><br> The payload of the POST contains: <ul> <li> the Subscription ID that the notification is in response to.</li> <li> the type of order that the notification applies to.</li> <li> the order ID of the order that has changed </li> <li> the new state of the order </li> <li> a message if one was attached as part of the state change.  This will often be present in error cases.</li> <li> the body of any note that was attached to the order, if applicable</li> <li> list of the completed telephone numbers for Port-in/Port-out/New Number/Disconnect orders in terminal state</li> </ul><br><br> The Payload follows 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.callbacks_notification_callback_api_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.callbacks_notification_callback_api_post_with_http_info(**kwargs)
        else:
            (data) = self.callbacks_notification_callback_api_post_with_http_info(**kwargs)
            return data

    def callbacks_notification_callback_api_post_with_http_info(self, **kwargs):
        """
        
        The POST to the callback API contains a summary of the order that is independent of the type of the order that caused the event that in turn caused the notification callback.  This requires that the customer's end system place an API call to the Bandwidth Dashboard to gather additional details on the change to the order if that is important.  <br><br> This approach was taken for two reasons: <ul> <li>some (or many) of the notifications might not require action.</li> <li>since orders contain different information, providing order-specific information would cause an undesirable tight linkage between notifications and every type of order, mandating API changes whenever the data associated with an order changed. </li> </ul><br><br> The payload of the POST contains: <ul> <li> the Subscription ID that the notification is in response to.</li> <li> the type of order that the notification applies to.</li> <li> the order ID of the order that has changed </li> <li> the new state of the order </li> <li> a message if one was attached as part of the state change.  This will often be present in error cases.</li> <li> the body of any note that was attached to the order, if applicable</li> <li> list of the completed telephone numbers for Port-in/Port-out/New Number/Disconnect orders in terminal state</li> </ul><br><br> The Payload follows 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.callbacks_notification_callback_api_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method callbacks_notification_callback_api_post" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/callbacks/notificationCallbackApi'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def callbacks_port_out_validation_callback_api_post(self, **kwargs):
        """
        
        The initial request for validation is a post to the pre-configured URL defined by the customer. This request contains optional elements for: <ul>   <li>PIN (optional) ( 10 digits )</li>    <li>Account Number (optional) ( 25 digits )</li>    <li>zipcode (optional) ( 15 characters )</li>     <li>a list of one or more telephone numbers (at least one telephone number must be provided) ( 10 digits )</li>    <li>Subscriber name for information purposes. (optional)( 93 characters )</li>   <li>PON for information and correlation purposes. (optional)( 25 characters )</li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.callbacks_port_out_validation_callback_api_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.callbacks_port_out_validation_callback_api_post_with_http_info(**kwargs)
        else:
            (data) = self.callbacks_port_out_validation_callback_api_post_with_http_info(**kwargs)
            return data

    def callbacks_port_out_validation_callback_api_post_with_http_info(self, **kwargs):
        """
        
        The initial request for validation is a post to the pre-configured URL defined by the customer. This request contains optional elements for: <ul>   <li>PIN (optional) ( 10 digits )</li>    <li>Account Number (optional) ( 25 digits )</li>    <li>zipcode (optional) ( 15 characters )</li>     <li>a list of one or more telephone numbers (at least one telephone number must be provided) ( 10 digits )</li>    <li>Subscriber name for information purposes. (optional)( 93 characters )</li>   <li>PON for information and correlation purposes. (optional)( 25 characters )</li> </ul> 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.callbacks_port_out_validation_callback_api_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method callbacks_port_out_validation_callback_api_post" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/callbacks/portOutValidationCallbackApi'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def cities_get(self, state, **kwargs):
        """
        
        The Rate Centers and Cities API Calls return information about the Bandwidth CLEC Network, including coverage data, indicating both the extent of on-net and off-net coverage, as well as number availability, again from an on-net and off-net perspective. The rules are as follows- <ul><li>If supported=true is specified, then the coverage or availability is reported for the Bandwidth CLEC only. </li><li>If supported is omitted or false, then the coverage or availability is reported for the combination of the Bandwidth CLEC and our partners </li><li>If available=true is specified, then only Rate Centers in which we have available numbers are reported. </li><li>If available is omitted or false, then all Rate Centers within the scope defined by supported will be returned. </li></ul>These rules apply for both the /rateCenters and /cities API calls. <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"> <tbody> <tr> <td valign=\"top\" > </td> <td valign=\"top\" > Supported = true </td> <td valign=\"top\" > Supported is missing </td> </tr> <tr> <td valign=\"top\" > available = true </td> <td valign=\"top\" > Available numbers within the Bandwidth CLEC network </td> <td valign=\"top\" > Available numbers within the Bandwidth CLEC network combined with our partner networks </td> </tr> <tr> <td valign=\"top\" > available is missing </td> <td valign=\"top\" > Coverage in the Bandwidth CLEC </td> <td valign=\"top\" > Coverage of the combined Bandwidth CLEC + Partner networks </td> </tr> </tbody> </table>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cities_get(state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: 2 character state code. (required)
        :param bool available: If available is set as true then the result includes the quantity of the available telephone numbers in that City. 
        :param bool supported: If supported is set to true the payload will show those Rate Centers that Bandwidth serves directly.    
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cities_get_with_http_info(state, **kwargs)
        else:
            (data) = self.cities_get_with_http_info(state, **kwargs)
            return data

    def cities_get_with_http_info(self, state, **kwargs):
        """
        
        The Rate Centers and Cities API Calls return information about the Bandwidth CLEC Network, including coverage data, indicating both the extent of on-net and off-net coverage, as well as number availability, again from an on-net and off-net perspective. The rules are as follows- <ul><li>If supported=true is specified, then the coverage or availability is reported for the Bandwidth CLEC only. </li><li>If supported is omitted or false, then the coverage or availability is reported for the combination of the Bandwidth CLEC and our partners </li><li>If available=true is specified, then only Rate Centers in which we have available numbers are reported. </li><li>If available is omitted or false, then all Rate Centers within the scope defined by supported will be returned. </li></ul>These rules apply for both the /rateCenters and /cities API calls. <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"> <tbody> <tr> <td valign=\"top\" > </td> <td valign=\"top\" > Supported = true </td> <td valign=\"top\" > Supported is missing </td> </tr> <tr> <td valign=\"top\" > available = true </td> <td valign=\"top\" > Available numbers within the Bandwidth CLEC network </td> <td valign=\"top\" > Available numbers within the Bandwidth CLEC network combined with our partner networks </td> </tr> <tr> <td valign=\"top\" > available is missing </td> <td valign=\"top\" > Coverage in the Bandwidth CLEC </td> <td valign=\"top\" > Coverage of the combined Bandwidth CLEC + Partner networks </td> </tr> </tbody> </table>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cities_get_with_http_info(state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: 2 character state code. (required)
        :param bool available: If available is set as true then the result includes the quantity of the available telephone numbers in that City. 
        :param bool supported: If supported is set to true the payload will show those Rate Centers that Bandwidth serves directly.    
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'available', 'supported']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cities_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params) or (params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `cities_get`")

        resource_path = '/cities'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'state' in params:
            query_params['state'] = params['state']
        if 'available' in params:
            query_params['available'] = params['available']
        if 'supported' in params:
            query_params['supported'] = params['supported']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def covered_rate_centers_get(self, page, size, **kwargs):
        """
        
        The Covered Rate Centers API Call return information about the Bandwidth CLEC Network, including coverage data, indicating both the extent of on-net and off-net coverage, as well as number availability. The various query parameters are summarized in the following table ... <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> <tbody> <tr> <td valign=\"top\" width=\"114\"> <p><strong>Query Parameter</strong> </p> </td> <td valign=\"top\"> <p><strong>Description</strong> </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>page </p> </td> <td valign=\"top\"> <p>The starting value for a paginated response. The default is ‘1’ indicating the first page of results. </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>size </p> </td> <td valign=\"top\"> <p>The number of rate centers to include in a paginated result payload. </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>state </p> </td> <td valign=\"top\"> <p>A 2 character State code </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>abbreviation </p> </td> <td valign=\"top\"> <p>A rate center abbreviation </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>name </p> </td> <td valign=\"top\"> <p>A rate center name </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>zip </p> </td> <td valign=\"top\"> <p>A 5 digit zip code </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>city </p> </td> <td valign=\"top\"> <p>A City name </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>lata </p> </td> <td valign=\"top\"> <p>A 3 or 5 digit LATA </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>tier </p> </td> <td valign=\"top\"> <p>A bandwidth coverage tier; a value from 0 to 5. </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>npa </p> </td> <td valign=\"top\"> <p>A 3 digit NPA or Area Code </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>npaNxx </p> </td> <td valign=\"top\"> <p>6 digits NPA and NXX values </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>npaNxxX </p> </td> <td valign=\"top\"> <p>7 digits of NPA, NXX and thousands block values. </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>embed </p> </td> <td valign=\"top\"> <p>One of the values [ZipCodes, Cities, NpaNxxX, AvailableNumberCount, LocalRateCenters]. <br> This repeatable query parameter will force a list (or multiple lists) of the indicated data to be provided in the response. For example if the payload should contain a list of the Cities covered by the Rate Centers then embed=cities would be included as a query parameter.<br> No filter parameters are supported if <q>LocalRateCenters</q> is specified. In this case only <q>size</q>, <q>page</q> and any other <q>embed</q> parameters are supported. </p> </td> </tr> </tbody> </table>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.covered_rate_centers_get(page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float page: the unique identifier of first rate center on the page.  Value for the first page: <i>1</i>  (required)
        :param float size: a number of rate centers on the page (required)
        :param list[str] embed: a set of fields that needs to be included in response.  A lists of zip codes, cities, vendors, NpaNxxXs and count of available TNs are not included for each rate center by default. A list of vendors is available only for admin users. LocalRateCenters can't be combined with any filter parameter. 
        :param str state: 2 character state code.
        :param str abbreviation: a rate center's abbreviation
        :param str name: a name of rate center
        :param str zip: a zip code of the area covered by rate center
        :param str city: a name of city covered by rate center
        :param float lata: a rate center's LATA
        :param float tier: the tier associated with covered rate center
        :param float npa: the Area Code covered by rate center
        :param float npa_nxx: the NPA-NXX covered by rate center
        :param float npa_nxx_x: the NPA-NXX-X covered by rate center
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.covered_rate_centers_get_with_http_info(page, size, **kwargs)
        else:
            (data) = self.covered_rate_centers_get_with_http_info(page, size, **kwargs)
            return data

    def covered_rate_centers_get_with_http_info(self, page, size, **kwargs):
        """
        
        The Covered Rate Centers API Call return information about the Bandwidth CLEC Network, including coverage data, indicating both the extent of on-net and off-net coverage, as well as number availability. The various query parameters are summarized in the following table ... <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"> <tbody> <tr> <td valign=\"top\" width=\"114\"> <p><strong>Query Parameter</strong> </p> </td> <td valign=\"top\"> <p><strong>Description</strong> </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>page </p> </td> <td valign=\"top\"> <p>The starting value for a paginated response. The default is ‘1’ indicating the first page of results. </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>size </p> </td> <td valign=\"top\"> <p>The number of rate centers to include in a paginated result payload. </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>state </p> </td> <td valign=\"top\"> <p>A 2 character State code </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>abbreviation </p> </td> <td valign=\"top\"> <p>A rate center abbreviation </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>name </p> </td> <td valign=\"top\"> <p>A rate center name </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>zip </p> </td> <td valign=\"top\"> <p>A 5 digit zip code </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>city </p> </td> <td valign=\"top\"> <p>A City name </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>lata </p> </td> <td valign=\"top\"> <p>A 3 or 5 digit LATA </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>tier </p> </td> <td valign=\"top\"> <p>A bandwidth coverage tier; a value from 0 to 5. </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>npa </p> </td> <td valign=\"top\"> <p>A 3 digit NPA or Area Code </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>npaNxx </p> </td> <td valign=\"top\"> <p>6 digits NPA and NXX values </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>npaNxxX </p> </td> <td valign=\"top\"> <p>7 digits of NPA, NXX and thousands block values. </p> </td> </tr> <tr> <td valign=\"top\" width=\"114\"> <p>embed </p> </td> <td valign=\"top\"> <p>One of the values [ZipCodes, Cities, NpaNxxX, AvailableNumberCount, LocalRateCenters]. <br> This repeatable query parameter will force a list (or multiple lists) of the indicated data to be provided in the response. For example if the payload should contain a list of the Cities covered by the Rate Centers then embed=cities would be included as a query parameter.<br> No filter parameters are supported if <q>LocalRateCenters</q> is specified. In this case only <q>size</q>, <q>page</q> and any other <q>embed</q> parameters are supported. </p> </td> </tr> </tbody> </table>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.covered_rate_centers_get_with_http_info(page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float page: the unique identifier of first rate center on the page.  Value for the first page: <i>1</i>  (required)
        :param float size: a number of rate centers on the page (required)
        :param list[str] embed: a set of fields that needs to be included in response.  A lists of zip codes, cities, vendors, NpaNxxXs and count of available TNs are not included for each rate center by default. A list of vendors is available only for admin users. LocalRateCenters can't be combined with any filter parameter. 
        :param str state: 2 character state code.
        :param str abbreviation: a rate center's abbreviation
        :param str name: a name of rate center
        :param str zip: a zip code of the area covered by rate center
        :param str city: a name of city covered by rate center
        :param float lata: a rate center's LATA
        :param float tier: the tier associated with covered rate center
        :param float npa: the Area Code covered by rate center
        :param float npa_nxx: the NPA-NXX covered by rate center
        :param float npa_nxx_x: the NPA-NXX-X covered by rate center
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'embed', 'state', 'abbreviation', 'name', 'zip', 'city', 'lata', 'tier', 'npa', 'npa_nxx', 'npa_nxx_x']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method covered_rate_centers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `covered_rate_centers_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `covered_rate_centers_get`")

        resource_path = '/coveredRateCenters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'embed' in params:
            query_params['embed'] = params['embed']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'abbreviation' in params:
            query_params['abbreviation'] = params['abbreviation']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'zip' in params:
            query_params['zip'] = params['zip']
        if 'city' in params:
            query_params['city'] = params['city']
        if 'lata' in params:
            query_params['lata'] = params['lata']
        if 'tier' in params:
            query_params['tier'] = params['tier']
        if 'npa' in params:
            query_params['npa'] = params['npa']
        if 'npa_nxx' in params:
            query_params['npaNxx'] = params['npa_nxx']
        if 'npa_nxx_x' in params:
            query_params['npaNxxX'] = params['npa_nxx_x']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def covered_rate_centers_rate_center_id_get(self, rate_center_id, **kwargs):
        """
        
        Retrieve information about a specific covered rate center identified as the resource. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.covered_rate_centers_rate_center_id_get(rate_center_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str rate_center_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.covered_rate_centers_rate_center_id_get_with_http_info(rate_center_id, **kwargs)
        else:
            (data) = self.covered_rate_centers_rate_center_id_get_with_http_info(rate_center_id, **kwargs)
            return data

    def covered_rate_centers_rate_center_id_get_with_http_info(self, rate_center_id, **kwargs):
        """
        
        Retrieve information about a specific covered rate center identified as the resource. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.covered_rate_centers_rate_center_id_get_with_http_info(rate_center_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str rate_center_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rate_center_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method covered_rate_centers_rate_center_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rate_center_id' is set
        if ('rate_center_id' not in params) or (params['rate_center_id'] is None):
            raise ValueError("Missing the required parameter `rate_center_id` when calling `covered_rate_centers_rate_center_id_get`")

        resource_path = '/coveredRateCenters/{rateCenterId}'.replace('{format}', 'json')
        path_params = {}
        if 'rate_center_id' in params:
            path_params['rateCenterId'] = params['rate_center_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def rate_centers_get(self, state, **kwargs):
        """
        
        The Rate Centers API Call returns information about the Bandwidth CLEC Network, including coverage data, indicating both the extent of on-net and off-net coverage, as well as number availability, again from an on-net and off-net perspective. The rules are as follows- <ul><li>If supported=true is specified, then the coverage or availability is reported for the Bandwidth CLEC only. </li><li>If supported=true is omitted or false, then the coverage or availability is reported for the combination of the Bandwidth CLEC and our partners </li><li>If available=true is specified, then only Rate Centers in which we have available numbers are reported. </li><li>If available is omitted or false then all Rate Centers within the scope defined by supported will be returned. </li></ul>These rules apply for both the /rateCenters and /cities API calls. <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"> <tbody> <tr> <td valign=\"top\" > </td> <td valign=\"top\" > Supported = true </td> <td valign=\"top\" > Supported is missing </td> </tr> <tr> <td valign=\"top\" > available = true </td> <td valign=\"top\" > Available numbers within the Bandwidth CLEC network </td> <td valign=\"top\" > Available numbers within the Bandwidth CLEC network combined with our partner networks </td> </tr> <tr> <td valign=\"top\" > available is missing </td> <td valign=\"top\" > Coverage in the Bandwidth CLEC </td> <td valign=\"top\" > Coverage of the combined Bandwidth CLEC + Partner networks </td> </tr> </tbody> </table>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_centers_get(state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: 2 character state code. (required)
        :param bool available: If available is set as true then the result includes the quantity of the available telephone numbers in that Rate Center. 
        :param bool supported: If supported is set to true the payload will show those Rate Centers that Bandwidth serves directly.   
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rate_centers_get_with_http_info(state, **kwargs)
        else:
            (data) = self.rate_centers_get_with_http_info(state, **kwargs)
            return data

    def rate_centers_get_with_http_info(self, state, **kwargs):
        """
        
        The Rate Centers API Call returns information about the Bandwidth CLEC Network, including coverage data, indicating both the extent of on-net and off-net coverage, as well as number availability, again from an on-net and off-net perspective. The rules are as follows- <ul><li>If supported=true is specified, then the coverage or availability is reported for the Bandwidth CLEC only. </li><li>If supported=true is omitted or false, then the coverage or availability is reported for the combination of the Bandwidth CLEC and our partners </li><li>If available=true is specified, then only Rate Centers in which we have available numbers are reported. </li><li>If available is omitted or false then all Rate Centers within the scope defined by supported will be returned. </li></ul>These rules apply for both the /rateCenters and /cities API calls. <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"> <tbody> <tr> <td valign=\"top\" > </td> <td valign=\"top\" > Supported = true </td> <td valign=\"top\" > Supported is missing </td> </tr> <tr> <td valign=\"top\" > available = true </td> <td valign=\"top\" > Available numbers within the Bandwidth CLEC network </td> <td valign=\"top\" > Available numbers within the Bandwidth CLEC network combined with our partner networks </td> </tr> <tr> <td valign=\"top\" > available is missing </td> <td valign=\"top\" > Coverage in the Bandwidth CLEC </td> <td valign=\"top\" > Coverage of the combined Bandwidth CLEC + Partner networks </td> </tr> </tbody> </table>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rate_centers_get_with_http_info(state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: 2 character state code. (required)
        :param bool available: If available is set as true then the result includes the quantity of the available telephone numbers in that Rate Center. 
        :param bool supported: If supported is set to true the payload will show those Rate Centers that Bandwidth serves directly.   
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'available', 'supported']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rate_centers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params) or (params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `rate_centers_get`")

        resource_path = '/rateCenters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'state' in params:
            query_params['state'] = params['state']
        if 'available' in params:
            query_params['available'] = params['available']
        if 'supported' in params:
            query_params['supported'] = params['supported']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_get(self, page, size, **kwargs):
        """
        
        Retrieve information about one or more Telephone Numbers (TNs), where the TNs are chosen based on the search parameters provided in the API Call.  

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_get(page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str page: An ID of the first element in a page.  This value will indicate the first value, not the count, of the initial entry in the page being requested.  Note in the example that the page is the TN that begins the page. The initial page is tagged with the ID '1' (required)
        :param int size: The number of items to include in a page (required)
        :param int account_id: The internal account id assigned to the customer that \"owns\" the TN
        :param str full_number: A 10 Digit TN
        :param int tier: A service tier indicating the the vendor class that the TN is associated with.  Tier indicates whether the TN is on-net, domestic offnet, Canadian, etc.
        :param int lata: The LATA (Local Access Transport Area) that the TN is served from, typically 3 digits (5 in FLA)
        :param str rate_center: The Rate Center designation that the number is served from.  If not combined with a State search the results will span states.
        :param str npa: The first 3 digits of a 10 Digit NA Telephone Number, the Area Code.
        :param str npa_nxx: The first 6 digits of a 10 Digit NA Telephone Number.
        :param str npa_nxx_x: The first 7 digits of a 10 Digit NA Telephone Number.
        :param str state: A 2 character State or Province designation - TX for Texas for example
        :param str city: The geographic city most likely to serve the Telephone Number.  City and other geographic data is determined statistically, and is not as reliable as Rate Center information for pinpointing the service location of a TN
        :param str host: An IP address or subnet (CIDR format) associated with the TN. Filter for subnet applies by exact match.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_get_with_http_info(page, size, **kwargs)
        else:
            (data) = self.tns_get_with_http_info(page, size, **kwargs)
            return data

    def tns_get_with_http_info(self, page, size, **kwargs):
        """
        
        Retrieve information about one or more Telephone Numbers (TNs), where the TNs are chosen based on the search parameters provided in the API Call.  

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_get_with_http_info(page, size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str page: An ID of the first element in a page.  This value will indicate the first value, not the count, of the initial entry in the page being requested.  Note in the example that the page is the TN that begins the page. The initial page is tagged with the ID '1' (required)
        :param int size: The number of items to include in a page (required)
        :param int account_id: The internal account id assigned to the customer that \"owns\" the TN
        :param str full_number: A 10 Digit TN
        :param int tier: A service tier indicating the the vendor class that the TN is associated with.  Tier indicates whether the TN is on-net, domestic offnet, Canadian, etc.
        :param int lata: The LATA (Local Access Transport Area) that the TN is served from, typically 3 digits (5 in FLA)
        :param str rate_center: The Rate Center designation that the number is served from.  If not combined with a State search the results will span states.
        :param str npa: The first 3 digits of a 10 Digit NA Telephone Number, the Area Code.
        :param str npa_nxx: The first 6 digits of a 10 Digit NA Telephone Number.
        :param str npa_nxx_x: The first 7 digits of a 10 Digit NA Telephone Number.
        :param str state: A 2 character State or Province designation - TX for Texas for example
        :param str city: The geographic city most likely to serve the Telephone Number.  City and other geographic data is determined statistically, and is not as reliable as Rate Center information for pinpointing the service location of a TN
        :param str host: An IP address or subnet (CIDR format) associated with the TN. Filter for subnet applies by exact match.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'account_id', 'full_number', 'tier', 'lata', 'rate_center', 'npa', 'npa_nxx', 'npa_nxx_x', 'state', 'city', 'host']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `tns_get`")
        # verify the required parameter 'size' is set
        if ('size' not in params) or (params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `tns_get`")

        resource_path = '/tns'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'size' in params:
            query_params['size'] = params['size']
        if 'account_id' in params:
            query_params['accountId'] = params['account_id']
        if 'full_number' in params:
            query_params['fullNumber'] = params['full_number']
        if 'tier' in params:
            query_params['tier'] = params['tier']
        if 'lata' in params:
            query_params['lata'] = params['lata']
        if 'rate_center' in params:
            query_params['rateCenter'] = params['rate_center']
        if 'npa' in params:
            query_params['npa'] = params['npa']
        if 'npa_nxx' in params:
            query_params['npaNxx'] = params['npa_nxx']
        if 'npa_nxx_x' in params:
            query_params['npaNxxX'] = params['npa_nxx_x']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'city' in params:
            query_params['city'] = params['city']
        if 'host' in params:
            query_params['host'] = params['host']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_get(self, tn, **kwargs):
        """
        
        Retrieves the telephone number's information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves the telephone number's information.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_get`")

        resource_path = '/tns/{tn}'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_history_get(self, tn, **kwargs):
        """
        
        Retrieves the history associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_history_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_history_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_history_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_history_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves the history associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_history_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_history_get`")

        resource_path = '/tns/{tn}/history'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_lata_get(self, tn, **kwargs):
        """
        
        Retrieves the lata associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_lata_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_lata_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_lata_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_lata_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves the lata associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_lata_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_lata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_lata_get`")

        resource_path = '/tns/{tn}/lata'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_lca_get(self, tn, **kwargs):
        """
        
        Retrieves the LCAs associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_lca_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_lca_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_lca_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_lca_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves the LCAs associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_lca_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_lca_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_lca_get`")

        resource_path = '/tns/{tn}/lca'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_ratecenter_get(self, tn, **kwargs):
        """
        
        Retrieves the rate centers associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_ratecenter_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_ratecenter_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_ratecenter_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_ratecenter_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves the rate centers associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_ratecenter_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_ratecenter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_ratecenter_get`")

        resource_path = '/tns/{tn}/ratecenter'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_sippeers_get(self, tn, **kwargs):
        """
        
        Retrieves the sippeers associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_sippeers_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_sippeers_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_sippeers_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_sippeers_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves the sippeers associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_sippeers_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_sippeers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_sippeers_get`")

        resource_path = '/tns/{tn}/sippeers'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_sites_get(self, tn, **kwargs):
        """
        
        Retrieves the sites associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_sites_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_sites_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_sites_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_sites_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves the sites associated with that telephone number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_sites_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_sites_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_sites_get`")

        resource_path = '/tns/{tn}/sites'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_tndetails_get(self, tn, **kwargs):
        """
        
        Retrieves detailed information about the phone number. TnAttributes - Does this telephone number is protected or not. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_tndetails_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_tndetails_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_tndetails_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_tndetails_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves detailed information about the phone number. TnAttributes - Does this telephone number is protected or not. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_tndetails_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_tndetails_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_tndetails_get`")

        resource_path = '/tns/{tn}/tndetails'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def tns_tn_tnreservation_get(self, tn, **kwargs):
        """
        
        Retrieves reservation information associated with the Telephone Number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_tnreservation_get(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tns_tn_tnreservation_get_with_http_info(tn, **kwargs)
        else:
            (data) = self.tns_tn_tnreservation_get_with_http_info(tn, **kwargs)
            return data

    def tns_tn_tnreservation_get_with_http_info(self, tn, **kwargs):
        """
        
        Retrieves reservation information associated with the Telephone Number.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tns_tn_tnreservation_get_with_http_info(tn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tn:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tns_tn_tnreservation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tn' is set
        if ('tn' not in params) or (params['tn'] is None):
            raise ValueError("Missing the required parameter `tn` when calling `tns_tn_tnreservation_get`")

        resource_path = '/tns/{tn}/tnreservation'.replace('{format}', 'json')
        path_params = {}
        if 'tn' in params:
            path_params['tn'] = params['tn']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def users_userid_get(self, userid, **kwargs):
        """
        
        Retrieve the information (except the password) for a specific user id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.users_userid_get(userid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.users_userid_get_with_http_info(userid, **kwargs)
        else:
            (data) = self.users_userid_get_with_http_info(userid, **kwargs)
            return data

    def users_userid_get_with_http_info(self, userid, **kwargs):
        """
        
        Retrieve the information (except the password) for a specific user id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.users_userid_get_with_http_info(userid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_userid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userid' is set
        if ('userid' not in params) or (params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `users_userid_get`")

        resource_path = '/users/{userid}'.replace('{format}', 'json')
        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def users_userid_password_put(self, userid, **kwargs):
        """
        
        Update a user's password.   Security is maintained by requiring the user's existing password as part of the authentication for the API call.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.users_userid_password_put(userid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.users_userid_password_put_with_http_info(userid, **kwargs)
        else:
            (data) = self.users_userid_password_put_with_http_info(userid, **kwargs)
            return data

    def users_userid_password_put_with_http_info(self, userid, **kwargs):
        """
        
        Update a user's password.   Security is maintained by requiring the user's existing password as part of the authentication for the API call.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.users_userid_password_put_with_http_info(userid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userid:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_userid_password_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userid' is set
        if ('userid' not in params) or (params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `users_userid_password_put`")

        resource_path = '/users/{userid}/password'.replace('{format}', 'json')
        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
